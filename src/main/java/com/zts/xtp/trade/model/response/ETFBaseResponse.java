// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.trade.model.response;

import com.zts.xtp.common.enums.MarketType;

public class ETFBaseResponse {
    /**
     * 交易市场
     */
    private MarketType marketType;
    /**
     * etf代码,买卖,申赎统一使用该代码
     */
    private String etf;
    /**
     * etf申购赎回代码
     */
    private String subscribeRedemptionTicker;
    /**
     * 最小申购赎回单位对应的ETF份数,例如上证"50ETF"就是900000
     */
    private int unit;
    /**
     * 是否允许申购,1-允许,0-禁止
     */
    private int subscribeStatus;
    /**
     * 是否允许赎回,1-允许,0-禁止
     */
    private int redemptionStatus;
    /**
     * 最大现金替代比例,小于1的数值 TODO 是否采用double
     */
    private double maxCashRatio;
    /**
     * T日预估金额
     */
    private double estimateAmount;
    /**
     * T-X日现金差额
     */
    private double cashComponent;
    /**
     * 基金单位净值
     */
    private double netValue;
    /**
     * 最小申赎单位净值总金额=net_value*unit
     */
    private double totalAmount;
    /**
     * 此消息响应函数对应的请求ID
     */
    private int requestId;
    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    private boolean lastResp;

    public void setMarketType(int type) {
        marketType = MarketType.values()[type];
    }


    @SuppressWarnings("all")
    public static class ETFBaseResponseBuilder {
        @SuppressWarnings("all")
        private MarketType marketType;
        @SuppressWarnings("all")
        private String etf;
        @SuppressWarnings("all")
        private String subscribeRedemptionTicker;
        @SuppressWarnings("all")
        private int unit;
        @SuppressWarnings("all")
        private int subscribeStatus;
        @SuppressWarnings("all")
        private int redemptionStatus;
        @SuppressWarnings("all")
        private double maxCashRatio;
        @SuppressWarnings("all")
        private double estimateAmount;
        @SuppressWarnings("all")
        private double cashComponent;
        @SuppressWarnings("all")
        private double netValue;
        @SuppressWarnings("all")
        private double totalAmount;
        @SuppressWarnings("all")
        private int requestId;
        @SuppressWarnings("all")
        private boolean lastResp;

        @SuppressWarnings("all")
        ETFBaseResponseBuilder() {
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder marketType(final MarketType marketType) {
            this.marketType = marketType;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder etf(final String etf) {
            this.etf = etf;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder subscribeRedemptionTicker(final String subscribeRedemptionTicker) {
            this.subscribeRedemptionTicker = subscribeRedemptionTicker;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder unit(final int unit) {
            this.unit = unit;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder subscribeStatus(final int subscribeStatus) {
            this.subscribeStatus = subscribeStatus;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder redemptionStatus(final int redemptionStatus) {
            this.redemptionStatus = redemptionStatus;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder maxCashRatio(final double maxCashRatio) {
            this.maxCashRatio = maxCashRatio;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder estimateAmount(final double estimateAmount) {
            this.estimateAmount = estimateAmount;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder cashComponent(final double cashComponent) {
            this.cashComponent = cashComponent;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder netValue(final double netValue) {
            this.netValue = netValue;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder totalAmount(final double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder requestId(final int requestId) {
            this.requestId = requestId;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponseBuilder lastResp(final boolean lastResp) {
            this.lastResp = lastResp;
            return this;
        }

        @SuppressWarnings("all")
        public ETFBaseResponse build() {
            return new ETFBaseResponse(marketType, etf, subscribeRedemptionTicker, unit, subscribeStatus, redemptionStatus, maxCashRatio, estimateAmount, cashComponent, netValue, totalAmount, requestId, lastResp);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "ETFBaseResponse.ETFBaseResponseBuilder(marketType=" + this.marketType + ", etf=" + this.etf + ", subscribeRedemptionTicker=" + this.subscribeRedemptionTicker + ", unit=" + this.unit + ", subscribeStatus=" + this.subscribeStatus + ", redemptionStatus=" + this.redemptionStatus + ", maxCashRatio=" + this.maxCashRatio + ", estimateAmount=" + this.estimateAmount + ", cashComponent=" + this.cashComponent + ", netValue=" + this.netValue + ", totalAmount=" + this.totalAmount + ", requestId=" + this.requestId + ", lastResp=" + this.lastResp + ")";
        }
    }

    @SuppressWarnings("all")
    public static ETFBaseResponseBuilder builder() {
        return new ETFBaseResponseBuilder();
    }

    /**
     * 交易市场
     */
    @SuppressWarnings("all")
    public MarketType getMarketType() {
        return this.marketType;
    }

    /**
     * etf代码,买卖,申赎统一使用该代码
     */
    @SuppressWarnings("all")
    public String getEtf() {
        return this.etf;
    }

    /**
     * etf申购赎回代码
     */
    @SuppressWarnings("all")
    public String getSubscribeRedemptionTicker() {
        return this.subscribeRedemptionTicker;
    }

    /**
     * 最小申购赎回单位对应的ETF份数,例如上证"50ETF"就是900000
     */
    @SuppressWarnings("all")
    public int getUnit() {
        return this.unit;
    }

    /**
     * 是否允许申购,1-允许,0-禁止
     */
    @SuppressWarnings("all")
    public int getSubscribeStatus() {
        return this.subscribeStatus;
    }

    /**
     * 是否允许赎回,1-允许,0-禁止
     */
    @SuppressWarnings("all")
    public int getRedemptionStatus() {
        return this.redemptionStatus;
    }

    /**
     * 最大现金替代比例,小于1的数值 TODO 是否采用double
     */
    @SuppressWarnings("all")
    public double getMaxCashRatio() {
        return this.maxCashRatio;
    }

    /**
     * T日预估金额
     */
    @SuppressWarnings("all")
    public double getEstimateAmount() {
        return this.estimateAmount;
    }

    /**
     * T-X日现金差额
     */
    @SuppressWarnings("all")
    public double getCashComponent() {
        return this.cashComponent;
    }

    /**
     * 基金单位净值
     */
    @SuppressWarnings("all")
    public double getNetValue() {
        return this.netValue;
    }

    /**
     * 最小申赎单位净值总金额=net_value*unit
     */
    @SuppressWarnings("all")
    public double getTotalAmount() {
        return this.totalAmount;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public int getRequestId() {
        return this.requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * etf代码,买卖,申赎统一使用该代码
     */
    @SuppressWarnings("all")
    public void setEtf(final String etf) {
        this.etf = etf;
    }

    /**
     * etf申购赎回代码
     */
    @SuppressWarnings("all")
    public void setSubscribeRedemptionTicker(final String subscribeRedemptionTicker) {
        this.subscribeRedemptionTicker = subscribeRedemptionTicker;
    }

    /**
     * 最小申购赎回单位对应的ETF份数,例如上证"50ETF"就是900000
     */
    @SuppressWarnings("all")
    public void setUnit(final int unit) {
        this.unit = unit;
    }

    /**
     * 是否允许申购,1-允许,0-禁止
     */
    @SuppressWarnings("all")
    public void setSubscribeStatus(final int subscribeStatus) {
        this.subscribeStatus = subscribeStatus;
    }

    /**
     * 是否允许赎回,1-允许,0-禁止
     */
    @SuppressWarnings("all")
    public void setRedemptionStatus(final int redemptionStatus) {
        this.redemptionStatus = redemptionStatus;
    }

    /**
     * 最大现金替代比例,小于1的数值 TODO 是否采用double
     */
    @SuppressWarnings("all")
    public void setMaxCashRatio(final double maxCashRatio) {
        this.maxCashRatio = maxCashRatio;
    }

    /**
     * T日预估金额
     */
    @SuppressWarnings("all")
    public void setEstimateAmount(final double estimateAmount) {
        this.estimateAmount = estimateAmount;
    }

    /**
     * T-X日现金差额
     */
    @SuppressWarnings("all")
    public void setCashComponent(final double cashComponent) {
        this.cashComponent = cashComponent;
    }

    /**
     * 基金单位净值
     */
    @SuppressWarnings("all")
    public void setNetValue(final double netValue) {
        this.netValue = netValue;
    }

    /**
     * 最小申赎单位净值总金额=net_value*unit
     */
    @SuppressWarnings("all")
    public void setTotalAmount(final double totalAmount) {
        this.totalAmount = totalAmount;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public void setRequestId(final int requestId) {
        this.requestId = requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "ETFBaseResponse(marketType=" + this.getMarketType() + ", etf=" + this.getEtf() + ", subscribeRedemptionTicker=" + this.getSubscribeRedemptionTicker() + ", unit=" + this.getUnit() + ", subscribeStatus=" + this.getSubscribeStatus() + ", redemptionStatus=" + this.getRedemptionStatus() + ", maxCashRatio=" + this.getMaxCashRatio() + ", estimateAmount=" + this.getEstimateAmount() + ", cashComponent=" + this.getCashComponent() + ", netValue=" + this.getNetValue() + ", totalAmount=" + this.getTotalAmount() + ", requestId=" + this.getRequestId() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public ETFBaseResponse() {
    }

    @SuppressWarnings("all")
    public ETFBaseResponse(final MarketType marketType, final String etf, final String subscribeRedemptionTicker, final int unit, final int subscribeStatus, final int redemptionStatus, final double maxCashRatio, final double estimateAmount, final double cashComponent, final double netValue, final double totalAmount, final int requestId, final boolean lastResp) {
        this.marketType = marketType;
        this.etf = etf;
        this.subscribeRedemptionTicker = subscribeRedemptionTicker;
        this.unit = unit;
        this.subscribeStatus = subscribeStatus;
        this.redemptionStatus = redemptionStatus;
        this.maxCashRatio = maxCashRatio;
        this.estimateAmount = estimateAmount;
        this.cashComponent = cashComponent;
        this.netValue = netValue;
        this.totalAmount = totalAmount;
        this.requestId = requestId;
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof ETFBaseResponse)) return false;
        final ETFBaseResponse other = (ETFBaseResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$marketType = this.getMarketType();
        final Object other$marketType = other.getMarketType();
        if (this$marketType == null ? other$marketType != null : !this$marketType.equals(other$marketType)) return false;
        final Object this$etf = this.getEtf();
        final Object other$etf = other.getEtf();
        if (this$etf == null ? other$etf != null : !this$etf.equals(other$etf)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof ETFBaseResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $marketType = this.getMarketType();
        result = result * PRIME + ($marketType == null ? 43 : $marketType.hashCode());
        final Object $etf = this.getEtf();
        result = result * PRIME + ($etf == null ? 43 : $etf.hashCode());
        return result;
    }
}
