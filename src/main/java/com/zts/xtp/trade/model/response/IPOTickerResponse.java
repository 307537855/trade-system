// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.trade.model.response;

import com.zts.xtp.common.enums.MarketType;
import com.zts.xtp.common.enums.TickerType;

public class IPOTickerResponse {
    /**
     * 交易市场
     */
    private MarketType marketType;
    /**
     * 申购代码
     */
    private String ticker;
    /**
     * 申购股票名称
     */
    private String tickerName;
    /**
     * 证券类别
     */
    private TickerType tickerType;
    /**
     * 申购价格
     */
    private double price;
    /**
     * 申购单元
     */
    private int unit;
    /**
     * 最大允许申购数量
     */
    private int qtyUpperLimit;
    /**
     * 此消息响应函数对应的请求ID
     */
    private int requestId;
    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    private boolean lastResp;

    public void setMarketType(int type) {
        marketType = MarketType.values()[type];
    }

    public void setTickerType(int tickerType) {
        this.tickerType = TickerType.values()[tickerType];
    }


    @SuppressWarnings("all")
    public static class IPOTickerResponseBuilder {
        @SuppressWarnings("all")
        private MarketType marketType;
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private String tickerName;
        @SuppressWarnings("all")
        private TickerType tickerType;
        @SuppressWarnings("all")
        private double price;
        @SuppressWarnings("all")
        private int unit;
        @SuppressWarnings("all")
        private int qtyUpperLimit;
        @SuppressWarnings("all")
        private int requestId;
        @SuppressWarnings("all")
        private boolean lastResp;

        @SuppressWarnings("all")
        IPOTickerResponseBuilder() {
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder marketType(final MarketType marketType) {
            this.marketType = marketType;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder tickerName(final String tickerName) {
            this.tickerName = tickerName;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder tickerType(final TickerType tickerType) {
            this.tickerType = tickerType;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder price(final double price) {
            this.price = price;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder unit(final int unit) {
            this.unit = unit;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder qtyUpperLimit(final int qtyUpperLimit) {
            this.qtyUpperLimit = qtyUpperLimit;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder requestId(final int requestId) {
            this.requestId = requestId;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponseBuilder lastResp(final boolean lastResp) {
            this.lastResp = lastResp;
            return this;
        }

        @SuppressWarnings("all")
        public IPOTickerResponse build() {
            return new IPOTickerResponse(marketType, ticker, tickerName, tickerType, price, unit, qtyUpperLimit, requestId, lastResp);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "IPOTickerResponse.IPOTickerResponseBuilder(marketType=" + this.marketType + ", ticker=" + this.ticker + ", tickerName=" + this.tickerName + ", tickerType=" + this.tickerType + ", price=" + this.price + ", unit=" + this.unit + ", qtyUpperLimit=" + this.qtyUpperLimit + ", requestId=" + this.requestId + ", lastResp=" + this.lastResp + ")";
        }
    }

    @SuppressWarnings("all")
    public static IPOTickerResponseBuilder builder() {
        return new IPOTickerResponseBuilder();
    }

    /**
     * 交易市场
     */
    @SuppressWarnings("all")
    public MarketType getMarketType() {
        return this.marketType;
    }

    /**
     * 申购代码
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 申购股票名称
     */
    @SuppressWarnings("all")
    public String getTickerName() {
        return this.tickerName;
    }

    /**
     * 证券类别
     */
    @SuppressWarnings("all")
    public TickerType getTickerType() {
        return this.tickerType;
    }

    /**
     * 申购价格
     */
    @SuppressWarnings("all")
    public double getPrice() {
        return this.price;
    }

    /**
     * 申购单元
     */
    @SuppressWarnings("all")
    public int getUnit() {
        return this.unit;
    }

    /**
     * 最大允许申购数量
     */
    @SuppressWarnings("all")
    public int getQtyUpperLimit() {
        return this.qtyUpperLimit;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public int getRequestId() {
        return this.requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * 申购代码
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 申购股票名称
     */
    @SuppressWarnings("all")
    public void setTickerName(final String tickerName) {
        this.tickerName = tickerName;
    }

    /**
     * 申购价格
     */
    @SuppressWarnings("all")
    public void setPrice(final double price) {
        this.price = price;
    }

    /**
     * 申购单元
     */
    @SuppressWarnings("all")
    public void setUnit(final int unit) {
        this.unit = unit;
    }

    /**
     * 最大允许申购数量
     */
    @SuppressWarnings("all")
    public void setQtyUpperLimit(final int qtyUpperLimit) {
        this.qtyUpperLimit = qtyUpperLimit;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public void setRequestId(final int requestId) {
        this.requestId = requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "IPOTickerResponse(marketType=" + this.getMarketType() + ", ticker=" + this.getTicker() + ", tickerName=" + this.getTickerName() + ", tickerType=" + this.getTickerType() + ", price=" + this.getPrice() + ", unit=" + this.getUnit() + ", qtyUpperLimit=" + this.getQtyUpperLimit() + ", requestId=" + this.getRequestId() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public IPOTickerResponse() {
    }

    @SuppressWarnings("all")
    public IPOTickerResponse(final MarketType marketType, final String ticker, final String tickerName, final TickerType tickerType, final double price, final int unit, final int qtyUpperLimit, final int requestId, final boolean lastResp) {
        this.marketType = marketType;
        this.ticker = ticker;
        this.tickerName = tickerName;
        this.tickerType = tickerType;
        this.price = price;
        this.unit = unit;
        this.qtyUpperLimit = qtyUpperLimit;
        this.requestId = requestId;
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof IPOTickerResponse)) return false;
        final IPOTickerResponse other = (IPOTickerResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$marketType = this.getMarketType();
        final Object other$marketType = other.getMarketType();
        if (this$marketType == null ? other$marketType != null : !this$marketType.equals(other$marketType)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof IPOTickerResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $marketType = this.getMarketType();
        result = result * PRIME + ($marketType == null ? 43 : $marketType.hashCode());
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        return result;
    }
}
