// Generated by delombok at Sun Sep 22 21:37:46 CST 2019
package com.zts.xtp.trade.model.response;

import com.zts.xtp.common.enums.ExchangeType;
import com.zts.xtp.common.enums.SplitMergeStatus;

public class StructuredFundResponse {
    /**
     * 交易所代码
     */
    private ExchangeType exchangeType;
    /**
     * 分级基金母基金代码
     */
    private String sfTicker;
    /**
     * 分级基金母基金名称
     */
    private String sfTickerName;
    /**
     * 分级基金子基金代码
     */
    private String ticker;
    /**
     * 分级基金子基金名称
     */
    private String tickerName;
    /**
     * 基金允许拆分合并状态
     */
    private SplitMergeStatus splitMergeStatus;
    /**
     * 拆分合并比例
     */
    private int ratio;
    /**
     * 最小拆分数量
     */
    private int minSplitQty;
    /**
     * 最小合并数量
     */
    private int minMergeQty;
    /**
     * 基金净值
     */
    private double netPrice;
    /**
     * 此消息响应函数对应的请求ID
     */
    private int requestId;
    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    private boolean lastResp;

    public void setExchangeType(int type) {
        exchangeType = ExchangeType.forType(type);
    }

    public void setSplitMergeStatus(int type) {
        splitMergeStatus = SplitMergeStatus.values()[type];
    }


    @SuppressWarnings("all")
    public static class StructuredFundResponseBuilder {
        @SuppressWarnings("all")
        private ExchangeType exchangeType;
        @SuppressWarnings("all")
        private String sfTicker;
        @SuppressWarnings("all")
        private String sfTickerName;
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private String tickerName;
        @SuppressWarnings("all")
        private SplitMergeStatus splitMergeStatus;
        @SuppressWarnings("all")
        private int ratio;
        @SuppressWarnings("all")
        private int minSplitQty;
        @SuppressWarnings("all")
        private int minMergeQty;
        @SuppressWarnings("all")
        private double netPrice;
        @SuppressWarnings("all")
        private int requestId;
        @SuppressWarnings("all")
        private boolean lastResp;

        @SuppressWarnings("all")
        StructuredFundResponseBuilder() {
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder exchangeType(final ExchangeType exchangeType) {
            this.exchangeType = exchangeType;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder sfTicker(final String sfTicker) {
            this.sfTicker = sfTicker;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder sfTickerName(final String sfTickerName) {
            this.sfTickerName = sfTickerName;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder tickerName(final String tickerName) {
            this.tickerName = tickerName;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder splitMergeStatus(final SplitMergeStatus splitMergeStatus) {
            this.splitMergeStatus = splitMergeStatus;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder ratio(final int ratio) {
            this.ratio = ratio;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder minSplitQty(final int minSplitQty) {
            this.minSplitQty = minSplitQty;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder minMergeQty(final int minMergeQty) {
            this.minMergeQty = minMergeQty;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder netPrice(final double netPrice) {
            this.netPrice = netPrice;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder requestId(final int requestId) {
            this.requestId = requestId;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponseBuilder lastResp(final boolean lastResp) {
            this.lastResp = lastResp;
            return this;
        }

        @SuppressWarnings("all")
        public StructuredFundResponse build() {
            return new StructuredFundResponse(exchangeType, sfTicker, sfTickerName, ticker, tickerName, splitMergeStatus, ratio, minSplitQty, minMergeQty, netPrice, requestId, lastResp);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "StructuredFundResponse.StructuredFundResponseBuilder(exchangeType=" + this.exchangeType + ", sfTicker=" + this.sfTicker + ", sfTickerName=" + this.sfTickerName + ", ticker=" + this.ticker + ", tickerName=" + this.tickerName + ", splitMergeStatus=" + this.splitMergeStatus + ", ratio=" + this.ratio + ", minSplitQty=" + this.minSplitQty + ", minMergeQty=" + this.minMergeQty + ", netPrice=" + this.netPrice + ", requestId=" + this.requestId + ", lastResp=" + this.lastResp + ")";
        }
    }

    @SuppressWarnings("all")
    public static StructuredFundResponseBuilder builder() {
        return new StructuredFundResponseBuilder();
    }

    /**
     * 交易所代码
     */
    @SuppressWarnings("all")
    public ExchangeType getExchangeType() {
        return this.exchangeType;
    }

    /**
     * 分级基金母基金代码
     */
    @SuppressWarnings("all")
    public String getSfTicker() {
        return this.sfTicker;
    }

    /**
     * 分级基金母基金名称
     */
    @SuppressWarnings("all")
    public String getSfTickerName() {
        return this.sfTickerName;
    }

    /**
     * 分级基金子基金代码
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 分级基金子基金名称
     */
    @SuppressWarnings("all")
    public String getTickerName() {
        return this.tickerName;
    }

    /**
     * 基金允许拆分合并状态
     */
    @SuppressWarnings("all")
    public SplitMergeStatus getSplitMergeStatus() {
        return this.splitMergeStatus;
    }

    /**
     * 拆分合并比例
     */
    @SuppressWarnings("all")
    public int getRatio() {
        return this.ratio;
    }

    /**
     * 最小拆分数量
     */
    @SuppressWarnings("all")
    public int getMinSplitQty() {
        return this.minSplitQty;
    }

    /**
     * 最小合并数量
     */
    @SuppressWarnings("all")
    public int getMinMergeQty() {
        return this.minMergeQty;
    }

    /**
     * 基金净值
     */
    @SuppressWarnings("all")
    public double getNetPrice() {
        return this.netPrice;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public int getRequestId() {
        return this.requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * 分级基金母基金代码
     */
    @SuppressWarnings("all")
    public void setSfTicker(final String sfTicker) {
        this.sfTicker = sfTicker;
    }

    /**
     * 分级基金母基金名称
     */
    @SuppressWarnings("all")
    public void setSfTickerName(final String sfTickerName) {
        this.sfTickerName = sfTickerName;
    }

    /**
     * 分级基金子基金代码
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 分级基金子基金名称
     */
    @SuppressWarnings("all")
    public void setTickerName(final String tickerName) {
        this.tickerName = tickerName;
    }

    /**
     * 拆分合并比例
     */
    @SuppressWarnings("all")
    public void setRatio(final int ratio) {
        this.ratio = ratio;
    }

    /**
     * 最小拆分数量
     */
    @SuppressWarnings("all")
    public void setMinSplitQty(final int minSplitQty) {
        this.minSplitQty = minSplitQty;
    }

    /**
     * 最小合并数量
     */
    @SuppressWarnings("all")
    public void setMinMergeQty(final int minMergeQty) {
        this.minMergeQty = minMergeQty;
    }

    /**
     * 基金净值
     */
    @SuppressWarnings("all")
    public void setNetPrice(final double netPrice) {
        this.netPrice = netPrice;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public void setRequestId(final int requestId) {
        this.requestId = requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "StructuredFundResponse(exchangeType=" + this.getExchangeType() + ", sfTicker=" + this.getSfTicker() + ", sfTickerName=" + this.getSfTickerName() + ", ticker=" + this.getTicker() + ", tickerName=" + this.getTickerName() + ", splitMergeStatus=" + this.getSplitMergeStatus() + ", ratio=" + this.getRatio() + ", minSplitQty=" + this.getMinSplitQty() + ", minMergeQty=" + this.getMinMergeQty() + ", netPrice=" + this.getNetPrice() + ", requestId=" + this.getRequestId() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public StructuredFundResponse() {
    }

    @SuppressWarnings("all")
    public StructuredFundResponse(final ExchangeType exchangeType, final String sfTicker, final String sfTickerName, final String ticker, final String tickerName, final SplitMergeStatus splitMergeStatus, final int ratio, final int minSplitQty, final int minMergeQty, final double netPrice, final int requestId, final boolean lastResp) {
        this.exchangeType = exchangeType;
        this.sfTicker = sfTicker;
        this.sfTickerName = sfTickerName;
        this.ticker = ticker;
        this.tickerName = tickerName;
        this.splitMergeStatus = splitMergeStatus;
        this.ratio = ratio;
        this.minSplitQty = minSplitQty;
        this.minMergeQty = minMergeQty;
        this.netPrice = netPrice;
        this.requestId = requestId;
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof StructuredFundResponse)) return false;
        final StructuredFundResponse other = (StructuredFundResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$exchangeType = this.getExchangeType();
        final Object other$exchangeType = other.getExchangeType();
        if (this$exchangeType == null ? other$exchangeType != null : !this$exchangeType.equals(other$exchangeType)) return false;
        final Object this$sfTicker = this.getSfTicker();
        final Object other$sfTicker = other.getSfTicker();
        if (this$sfTicker == null ? other$sfTicker != null : !this$sfTicker.equals(other$sfTicker)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof StructuredFundResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $exchangeType = this.getExchangeType();
        result = result * PRIME + ($exchangeType == null ? 43 : $exchangeType.hashCode());
        final Object $sfTicker = this.getSfTicker();
        result = result * PRIME + ($sfTicker == null ? 43 : $sfTicker.hashCode());
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        return result;
    }
}
