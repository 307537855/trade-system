// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.trade.model.response;

import com.zts.xtp.common.enums.MarketType;
import com.zts.xtp.common.enums.OptCallOrPutType;
import com.zts.xtp.common.enums.OptExerciseType;
import com.zts.xtp.common.enums.TickerType;

public class OptionAuctionInfoResponse {
    /**
     * 合约编码，报单ticker采用本字段
     */
    private String ticker;
    /**
     * 证券代码源
     */
    private MarketType securityIdSource;
    /**
     * 合约简称
     */
    private String symbol;
    /**
     * 合约交易代码
     */
    private String contractId;
    /**
     * 基础证券代码
     */
    private String underlyingSecurityId;
    /**
     * 基础证券代码源
     */
    private MarketType underlyingSecurityIdSource;
    /**
     * 上市日期，格式为YYYYMMDD
     */
    private long listDate;
    /**
     * 最后交易日，格式为YYYYMMDD
     */
    private long lastTradeDate;
    /**
     * 证券类别
     */
    private TickerType tickerType;
    /**
     * 是否支持当日回转交易，1-允许，0-不允许
     */
    private int dayTrading;
    /**
     * 认购或认沽
     */
    private OptCallOrPutType callOrPut;
    /**
     * 行权交割日，格式为YYYYMMDD
     */
    private long deliveryDay;
    /**
     * 交割月份，格式为YYYYMM
     */
    private long deliveryMonth;
    /**
     * 行权方式
     */
    private OptExerciseType exerciseType;
    /**
     * 行权起始日期，格式为YYYYMMDD
     */
    private long exerciseBeginDate;
    /**
     * 行权结束日期，格式为YYYYMMDD
     */
    private long exerciseEndDate;
    /**
     * 行权价格
     */
    private double exercisePrice;
    /**
     * 数量单位，对于某一证券申报的委托，其委托数量字段必须为该证券数量单位的整数倍
     */
    private long qtyUnit;
    /**
     * 合约单位
     */
    private long contractUnit;
    /**
     * 合约持仓量
     */
    private long contractPosition;
    /**
     * 合约前收盘价
     */
    private double prevClosePrice;
    /**
     * 合约前结算价
     */
    private double prevClearingPrice;
    /**
     * 限价买最大量
     */
    private long lmtBuyMaxQty;
    /**
     * 限价买最小量
     */
    private long lmtBuyMinQty;
    /**
     * 限价卖最大量
     */
    private long lmtSellMaxQty;
    /**
     * 限价卖最小量
     */
    private long lmtSellMinQty;
    /**
     * 市价买最大量
     */
    private long mktBuyMaxQty;
    /**
     * 市价买最小量
     */
    private long mktBuyMinQty;
    /**
     * 市价卖最大量
     */
    private long mktSellMaxQty;
    /**
     * 市价卖最小量
     */
    private long mktSellMinQty;
    /**
     * 最小报价单位
     */
    private double priceTick;
    /**
     * 涨停价
     */
    private double upperLimitPrice;
    /**
     * 跌停价
     */
    private double lowerLimitPrice;
    /**
     * 今卖开每张保证金
     */
    private double sellMargin;
    /**
     * 交易所保证金比例计算参数一
     */
    private double marginRatioParam1;
    /**
     * 交易所保证金比例计算参数二
     */
    private double marginRatioParam2;
    /**
     * 此消息响应函数对应的请求ID
     */
    private int requestId;
    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    private boolean lastResp;

    public void setSecurityIdSource(int securityIdSource) {
        this.securityIdSource = MarketType.values()[securityIdSource];
    }

    public void setUnderlyingSecurityIdSource(int underlyingSecurityIdSource) {
        this.underlyingSecurityIdSource = MarketType.values()[underlyingSecurityIdSource];
    }

    public void setTickerType(int tickerType) {
        this.tickerType = TickerType.values()[tickerType];
    }

    public void setCallOrPut(int callOrPut) {
        this.callOrPut = OptCallOrPutType.values()[callOrPut - 1];
    }

    public void setExerciseType(int exerciseType) {
        this.exerciseType = OptExerciseType.values()[exerciseType - 1];
    }


    @SuppressWarnings("all")
    public static class OptionAuctionInfoResponseBuilder {
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private MarketType securityIdSource;
        @SuppressWarnings("all")
        private String symbol;
        @SuppressWarnings("all")
        private String contractId;
        @SuppressWarnings("all")
        private String underlyingSecurityId;
        @SuppressWarnings("all")
        private MarketType underlyingSecurityIdSource;
        @SuppressWarnings("all")
        private long listDate;
        @SuppressWarnings("all")
        private long lastTradeDate;
        @SuppressWarnings("all")
        private TickerType tickerType;
        @SuppressWarnings("all")
        private int dayTrading;
        @SuppressWarnings("all")
        private OptCallOrPutType callOrPut;
        @SuppressWarnings("all")
        private long deliveryDay;
        @SuppressWarnings("all")
        private long deliveryMonth;
        @SuppressWarnings("all")
        private OptExerciseType exerciseType;
        @SuppressWarnings("all")
        private long exerciseBeginDate;
        @SuppressWarnings("all")
        private long exerciseEndDate;
        @SuppressWarnings("all")
        private double exercisePrice;
        @SuppressWarnings("all")
        private long qtyUnit;
        @SuppressWarnings("all")
        private long contractUnit;
        @SuppressWarnings("all")
        private long contractPosition;
        @SuppressWarnings("all")
        private double prevClosePrice;
        @SuppressWarnings("all")
        private double prevClearingPrice;
        @SuppressWarnings("all")
        private long lmtBuyMaxQty;
        @SuppressWarnings("all")
        private long lmtBuyMinQty;
        @SuppressWarnings("all")
        private long lmtSellMaxQty;
        @SuppressWarnings("all")
        private long lmtSellMinQty;
        @SuppressWarnings("all")
        private long mktBuyMaxQty;
        @SuppressWarnings("all")
        private long mktBuyMinQty;
        @SuppressWarnings("all")
        private long mktSellMaxQty;
        @SuppressWarnings("all")
        private long mktSellMinQty;
        @SuppressWarnings("all")
        private double priceTick;
        @SuppressWarnings("all")
        private double upperLimitPrice;
        @SuppressWarnings("all")
        private double lowerLimitPrice;
        @SuppressWarnings("all")
        private double sellMargin;
        @SuppressWarnings("all")
        private double marginRatioParam1;
        @SuppressWarnings("all")
        private double marginRatioParam2;
        @SuppressWarnings("all")
        private int requestId;
        @SuppressWarnings("all")
        private boolean lastResp;

        @SuppressWarnings("all")
        OptionAuctionInfoResponseBuilder() {
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder securityIdSource(final MarketType securityIdSource) {
            this.securityIdSource = securityIdSource;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder symbol(final String symbol) {
            this.symbol = symbol;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder contractId(final String contractId) {
            this.contractId = contractId;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder underlyingSecurityId(final String underlyingSecurityId) {
            this.underlyingSecurityId = underlyingSecurityId;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder underlyingSecurityIdSource(final MarketType underlyingSecurityIdSource) {
            this.underlyingSecurityIdSource = underlyingSecurityIdSource;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder listDate(final long listDate) {
            this.listDate = listDate;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lastTradeDate(final long lastTradeDate) {
            this.lastTradeDate = lastTradeDate;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder tickerType(final TickerType tickerType) {
            this.tickerType = tickerType;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder dayTrading(final int dayTrading) {
            this.dayTrading = dayTrading;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder callOrPut(final OptCallOrPutType callOrPut) {
            this.callOrPut = callOrPut;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder deliveryDay(final long deliveryDay) {
            this.deliveryDay = deliveryDay;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder deliveryMonth(final long deliveryMonth) {
            this.deliveryMonth = deliveryMonth;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder exerciseType(final OptExerciseType exerciseType) {
            this.exerciseType = exerciseType;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder exerciseBeginDate(final long exerciseBeginDate) {
            this.exerciseBeginDate = exerciseBeginDate;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder exerciseEndDate(final long exerciseEndDate) {
            this.exerciseEndDate = exerciseEndDate;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder exercisePrice(final double exercisePrice) {
            this.exercisePrice = exercisePrice;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder qtyUnit(final long qtyUnit) {
            this.qtyUnit = qtyUnit;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder contractUnit(final long contractUnit) {
            this.contractUnit = contractUnit;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder contractPosition(final long contractPosition) {
            this.contractPosition = contractPosition;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder prevClosePrice(final double prevClosePrice) {
            this.prevClosePrice = prevClosePrice;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder prevClearingPrice(final double prevClearingPrice) {
            this.prevClearingPrice = prevClearingPrice;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lmtBuyMaxQty(final long lmtBuyMaxQty) {
            this.lmtBuyMaxQty = lmtBuyMaxQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lmtBuyMinQty(final long lmtBuyMinQty) {
            this.lmtBuyMinQty = lmtBuyMinQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lmtSellMaxQty(final long lmtSellMaxQty) {
            this.lmtSellMaxQty = lmtSellMaxQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lmtSellMinQty(final long lmtSellMinQty) {
            this.lmtSellMinQty = lmtSellMinQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder mktBuyMaxQty(final long mktBuyMaxQty) {
            this.mktBuyMaxQty = mktBuyMaxQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder mktBuyMinQty(final long mktBuyMinQty) {
            this.mktBuyMinQty = mktBuyMinQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder mktSellMaxQty(final long mktSellMaxQty) {
            this.mktSellMaxQty = mktSellMaxQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder mktSellMinQty(final long mktSellMinQty) {
            this.mktSellMinQty = mktSellMinQty;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder priceTick(final double priceTick) {
            this.priceTick = priceTick;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder upperLimitPrice(final double upperLimitPrice) {
            this.upperLimitPrice = upperLimitPrice;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lowerLimitPrice(final double lowerLimitPrice) {
            this.lowerLimitPrice = lowerLimitPrice;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder sellMargin(final double sellMargin) {
            this.sellMargin = sellMargin;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder marginRatioParam1(final double marginRatioParam1) {
            this.marginRatioParam1 = marginRatioParam1;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder marginRatioParam2(final double marginRatioParam2) {
            this.marginRatioParam2 = marginRatioParam2;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder requestId(final int requestId) {
            this.requestId = requestId;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponseBuilder lastResp(final boolean lastResp) {
            this.lastResp = lastResp;
            return this;
        }

        @SuppressWarnings("all")
        public OptionAuctionInfoResponse build() {
            return new OptionAuctionInfoResponse(ticker, securityIdSource, symbol, contractId, underlyingSecurityId, underlyingSecurityIdSource, listDate, lastTradeDate, tickerType, dayTrading, callOrPut, deliveryDay, deliveryMonth, exerciseType, exerciseBeginDate, exerciseEndDate, exercisePrice, qtyUnit, contractUnit, contractPosition, prevClosePrice, prevClearingPrice, lmtBuyMaxQty, lmtBuyMinQty, lmtSellMaxQty, lmtSellMinQty, mktBuyMaxQty, mktBuyMinQty, mktSellMaxQty, mktSellMinQty, priceTick, upperLimitPrice, lowerLimitPrice, sellMargin, marginRatioParam1, marginRatioParam2, requestId, lastResp);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "OptionAuctionInfoResponse.OptionAuctionInfoResponseBuilder(ticker=" + this.ticker + ", securityIdSource=" + this.securityIdSource + ", symbol=" + this.symbol + ", contractId=" + this.contractId + ", underlyingSecurityId=" + this.underlyingSecurityId + ", underlyingSecurityIdSource=" + this.underlyingSecurityIdSource + ", listDate=" + this.listDate + ", lastTradeDate=" + this.lastTradeDate + ", tickerType=" + this.tickerType + ", dayTrading=" + this.dayTrading + ", callOrPut=" + this.callOrPut + ", deliveryDay=" + this.deliveryDay + ", deliveryMonth=" + this.deliveryMonth + ", exerciseType=" + this.exerciseType + ", exerciseBeginDate=" + this.exerciseBeginDate + ", exerciseEndDate=" + this.exerciseEndDate + ", exercisePrice=" + this.exercisePrice + ", qtyUnit=" + this.qtyUnit + ", contractUnit=" + this.contractUnit + ", contractPosition=" + this.contractPosition + ", prevClosePrice=" + this.prevClosePrice + ", prevClearingPrice=" + this.prevClearingPrice + ", lmtBuyMaxQty=" + this.lmtBuyMaxQty + ", lmtBuyMinQty=" + this.lmtBuyMinQty + ", lmtSellMaxQty=" + this.lmtSellMaxQty + ", lmtSellMinQty=" + this.lmtSellMinQty + ", mktBuyMaxQty=" + this.mktBuyMaxQty + ", mktBuyMinQty=" + this.mktBuyMinQty + ", mktSellMaxQty=" + this.mktSellMaxQty + ", mktSellMinQty=" + this.mktSellMinQty + ", priceTick=" + this.priceTick + ", upperLimitPrice=" + this.upperLimitPrice + ", lowerLimitPrice=" + this.lowerLimitPrice + ", sellMargin=" + this.sellMargin + ", marginRatioParam1=" + this.marginRatioParam1 + ", marginRatioParam2=" + this.marginRatioParam2 + ", requestId=" + this.requestId + ", lastResp=" + this.lastResp + ")";
        }
    }

    @SuppressWarnings("all")
    public static OptionAuctionInfoResponseBuilder builder() {
        return new OptionAuctionInfoResponseBuilder();
    }

    /**
     * 合约编码，报单ticker采用本字段
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 证券代码源
     */
    @SuppressWarnings("all")
    public MarketType getSecurityIdSource() {
        return this.securityIdSource;
    }

    /**
     * 合约简称
     */
    @SuppressWarnings("all")
    public String getSymbol() {
        return this.symbol;
    }

    /**
     * 合约交易代码
     */
    @SuppressWarnings("all")
    public String getContractId() {
        return this.contractId;
    }

    /**
     * 基础证券代码
     */
    @SuppressWarnings("all")
    public String getUnderlyingSecurityId() {
        return this.underlyingSecurityId;
    }

    /**
     * 基础证券代码源
     */
    @SuppressWarnings("all")
    public MarketType getUnderlyingSecurityIdSource() {
        return this.underlyingSecurityIdSource;
    }

    /**
     * 上市日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public long getListDate() {
        return this.listDate;
    }

    /**
     * 最后交易日，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public long getLastTradeDate() {
        return this.lastTradeDate;
    }

    /**
     * 证券类别
     */
    @SuppressWarnings("all")
    public TickerType getTickerType() {
        return this.tickerType;
    }

    /**
     * 是否支持当日回转交易，1-允许，0-不允许
     */
    @SuppressWarnings("all")
    public int getDayTrading() {
        return this.dayTrading;
    }

    /**
     * 认购或认沽
     */
    @SuppressWarnings("all")
    public OptCallOrPutType getCallOrPut() {
        return this.callOrPut;
    }

    /**
     * 行权交割日，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public long getDeliveryDay() {
        return this.deliveryDay;
    }

    /**
     * 交割月份，格式为YYYYMM
     */
    @SuppressWarnings("all")
    public long getDeliveryMonth() {
        return this.deliveryMonth;
    }

    /**
     * 行权方式
     */
    @SuppressWarnings("all")
    public OptExerciseType getExerciseType() {
        return this.exerciseType;
    }

    /**
     * 行权起始日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public long getExerciseBeginDate() {
        return this.exerciseBeginDate;
    }

    /**
     * 行权结束日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public long getExerciseEndDate() {
        return this.exerciseEndDate;
    }

    /**
     * 行权价格
     */
    @SuppressWarnings("all")
    public double getExercisePrice() {
        return this.exercisePrice;
    }

    /**
     * 数量单位，对于某一证券申报的委托，其委托数量字段必须为该证券数量单位的整数倍
     */
    @SuppressWarnings("all")
    public long getQtyUnit() {
        return this.qtyUnit;
    }

    /**
     * 合约单位
     */
    @SuppressWarnings("all")
    public long getContractUnit() {
        return this.contractUnit;
    }

    /**
     * 合约持仓量
     */
    @SuppressWarnings("all")
    public long getContractPosition() {
        return this.contractPosition;
    }

    /**
     * 合约前收盘价
     */
    @SuppressWarnings("all")
    public double getPrevClosePrice() {
        return this.prevClosePrice;
    }

    /**
     * 合约前结算价
     */
    @SuppressWarnings("all")
    public double getPrevClearingPrice() {
        return this.prevClearingPrice;
    }

    /**
     * 限价买最大量
     */
    @SuppressWarnings("all")
    public long getLmtBuyMaxQty() {
        return this.lmtBuyMaxQty;
    }

    /**
     * 限价买最小量
     */
    @SuppressWarnings("all")
    public long getLmtBuyMinQty() {
        return this.lmtBuyMinQty;
    }

    /**
     * 限价卖最大量
     */
    @SuppressWarnings("all")
    public long getLmtSellMaxQty() {
        return this.lmtSellMaxQty;
    }

    /**
     * 限价卖最小量
     */
    @SuppressWarnings("all")
    public long getLmtSellMinQty() {
        return this.lmtSellMinQty;
    }

    /**
     * 市价买最大量
     */
    @SuppressWarnings("all")
    public long getMktBuyMaxQty() {
        return this.mktBuyMaxQty;
    }

    /**
     * 市价买最小量
     */
    @SuppressWarnings("all")
    public long getMktBuyMinQty() {
        return this.mktBuyMinQty;
    }

    /**
     * 市价卖最大量
     */
    @SuppressWarnings("all")
    public long getMktSellMaxQty() {
        return this.mktSellMaxQty;
    }

    /**
     * 市价卖最小量
     */
    @SuppressWarnings("all")
    public long getMktSellMinQty() {
        return this.mktSellMinQty;
    }

    /**
     * 最小报价单位
     */
    @SuppressWarnings("all")
    public double getPriceTick() {
        return this.priceTick;
    }

    /**
     * 涨停价
     */
    @SuppressWarnings("all")
    public double getUpperLimitPrice() {
        return this.upperLimitPrice;
    }

    /**
     * 跌停价
     */
    @SuppressWarnings("all")
    public double getLowerLimitPrice() {
        return this.lowerLimitPrice;
    }

    /**
     * 今卖开每张保证金
     */
    @SuppressWarnings("all")
    public double getSellMargin() {
        return this.sellMargin;
    }

    /**
     * 交易所保证金比例计算参数一
     */
    @SuppressWarnings("all")
    public double getMarginRatioParam1() {
        return this.marginRatioParam1;
    }

    /**
     * 交易所保证金比例计算参数二
     */
    @SuppressWarnings("all")
    public double getMarginRatioParam2() {
        return this.marginRatioParam2;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public int getRequestId() {
        return this.requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * 合约编码，报单ticker采用本字段
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 合约简称
     */
    @SuppressWarnings("all")
    public void setSymbol(final String symbol) {
        this.symbol = symbol;
    }

    /**
     * 合约交易代码
     */
    @SuppressWarnings("all")
    public void setContractId(final String contractId) {
        this.contractId = contractId;
    }

    /**
     * 基础证券代码
     */
    @SuppressWarnings("all")
    public void setUnderlyingSecurityId(final String underlyingSecurityId) {
        this.underlyingSecurityId = underlyingSecurityId;
    }

    /**
     * 上市日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public void setListDate(final long listDate) {
        this.listDate = listDate;
    }

    /**
     * 最后交易日，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public void setLastTradeDate(final long lastTradeDate) {
        this.lastTradeDate = lastTradeDate;
    }

    /**
     * 是否支持当日回转交易，1-允许，0-不允许
     */
    @SuppressWarnings("all")
    public void setDayTrading(final int dayTrading) {
        this.dayTrading = dayTrading;
    }

    /**
     * 行权交割日，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public void setDeliveryDay(final long deliveryDay) {
        this.deliveryDay = deliveryDay;
    }

    /**
     * 交割月份，格式为YYYYMM
     */
    @SuppressWarnings("all")
    public void setDeliveryMonth(final long deliveryMonth) {
        this.deliveryMonth = deliveryMonth;
    }

    /**
     * 行权起始日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public void setExerciseBeginDate(final long exerciseBeginDate) {
        this.exerciseBeginDate = exerciseBeginDate;
    }

    /**
     * 行权结束日期，格式为YYYYMMDD
     */
    @SuppressWarnings("all")
    public void setExerciseEndDate(final long exerciseEndDate) {
        this.exerciseEndDate = exerciseEndDate;
    }

    /**
     * 行权价格
     */
    @SuppressWarnings("all")
    public void setExercisePrice(final double exercisePrice) {
        this.exercisePrice = exercisePrice;
    }

    /**
     * 数量单位，对于某一证券申报的委托，其委托数量字段必须为该证券数量单位的整数倍
     */
    @SuppressWarnings("all")
    public void setQtyUnit(final long qtyUnit) {
        this.qtyUnit = qtyUnit;
    }

    /**
     * 合约单位
     */
    @SuppressWarnings("all")
    public void setContractUnit(final long contractUnit) {
        this.contractUnit = contractUnit;
    }

    /**
     * 合约持仓量
     */
    @SuppressWarnings("all")
    public void setContractPosition(final long contractPosition) {
        this.contractPosition = contractPosition;
    }

    /**
     * 合约前收盘价
     */
    @SuppressWarnings("all")
    public void setPrevClosePrice(final double prevClosePrice) {
        this.prevClosePrice = prevClosePrice;
    }

    /**
     * 合约前结算价
     */
    @SuppressWarnings("all")
    public void setPrevClearingPrice(final double prevClearingPrice) {
        this.prevClearingPrice = prevClearingPrice;
    }

    /**
     * 限价买最大量
     */
    @SuppressWarnings("all")
    public void setLmtBuyMaxQty(final long lmtBuyMaxQty) {
        this.lmtBuyMaxQty = lmtBuyMaxQty;
    }

    /**
     * 限价买最小量
     */
    @SuppressWarnings("all")
    public void setLmtBuyMinQty(final long lmtBuyMinQty) {
        this.lmtBuyMinQty = lmtBuyMinQty;
    }

    /**
     * 限价卖最大量
     */
    @SuppressWarnings("all")
    public void setLmtSellMaxQty(final long lmtSellMaxQty) {
        this.lmtSellMaxQty = lmtSellMaxQty;
    }

    /**
     * 限价卖最小量
     */
    @SuppressWarnings("all")
    public void setLmtSellMinQty(final long lmtSellMinQty) {
        this.lmtSellMinQty = lmtSellMinQty;
    }

    /**
     * 市价买最大量
     */
    @SuppressWarnings("all")
    public void setMktBuyMaxQty(final long mktBuyMaxQty) {
        this.mktBuyMaxQty = mktBuyMaxQty;
    }

    /**
     * 市价买最小量
     */
    @SuppressWarnings("all")
    public void setMktBuyMinQty(final long mktBuyMinQty) {
        this.mktBuyMinQty = mktBuyMinQty;
    }

    /**
     * 市价卖最大量
     */
    @SuppressWarnings("all")
    public void setMktSellMaxQty(final long mktSellMaxQty) {
        this.mktSellMaxQty = mktSellMaxQty;
    }

    /**
     * 市价卖最小量
     */
    @SuppressWarnings("all")
    public void setMktSellMinQty(final long mktSellMinQty) {
        this.mktSellMinQty = mktSellMinQty;
    }

    /**
     * 最小报价单位
     */
    @SuppressWarnings("all")
    public void setPriceTick(final double priceTick) {
        this.priceTick = priceTick;
    }

    /**
     * 涨停价
     */
    @SuppressWarnings("all")
    public void setUpperLimitPrice(final double upperLimitPrice) {
        this.upperLimitPrice = upperLimitPrice;
    }

    /**
     * 跌停价
     */
    @SuppressWarnings("all")
    public void setLowerLimitPrice(final double lowerLimitPrice) {
        this.lowerLimitPrice = lowerLimitPrice;
    }

    /**
     * 今卖开每张保证金
     */
    @SuppressWarnings("all")
    public void setSellMargin(final double sellMargin) {
        this.sellMargin = sellMargin;
    }

    /**
     * 交易所保证金比例计算参数一
     */
    @SuppressWarnings("all")
    public void setMarginRatioParam1(final double marginRatioParam1) {
        this.marginRatioParam1 = marginRatioParam1;
    }

    /**
     * 交易所保证金比例计算参数二
     */
    @SuppressWarnings("all")
    public void setMarginRatioParam2(final double marginRatioParam2) {
        this.marginRatioParam2 = marginRatioParam2;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public void setRequestId(final int requestId) {
        this.requestId = requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof OptionAuctionInfoResponse)) return false;
        final OptionAuctionInfoResponse other = (OptionAuctionInfoResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        final Object this$securityIdSource = this.getSecurityIdSource();
        final Object other$securityIdSource = other.getSecurityIdSource();
        if (this$securityIdSource == null ? other$securityIdSource != null : !this$securityIdSource.equals(other$securityIdSource)) return false;
        final Object this$symbol = this.getSymbol();
        final Object other$symbol = other.getSymbol();
        if (this$symbol == null ? other$symbol != null : !this$symbol.equals(other$symbol)) return false;
        final Object this$contractId = this.getContractId();
        final Object other$contractId = other.getContractId();
        if (this$contractId == null ? other$contractId != null : !this$contractId.equals(other$contractId)) return false;
        final Object this$underlyingSecurityId = this.getUnderlyingSecurityId();
        final Object other$underlyingSecurityId = other.getUnderlyingSecurityId();
        if (this$underlyingSecurityId == null ? other$underlyingSecurityId != null : !this$underlyingSecurityId.equals(other$underlyingSecurityId)) return false;
        final Object this$underlyingSecurityIdSource = this.getUnderlyingSecurityIdSource();
        final Object other$underlyingSecurityIdSource = other.getUnderlyingSecurityIdSource();
        if (this$underlyingSecurityIdSource == null ? other$underlyingSecurityIdSource != null : !this$underlyingSecurityIdSource.equals(other$underlyingSecurityIdSource)) return false;
        if (this.getListDate() != other.getListDate()) return false;
        if (this.getLastTradeDate() != other.getLastTradeDate()) return false;
        final Object this$tickerType = this.getTickerType();
        final Object other$tickerType = other.getTickerType();
        if (this$tickerType == null ? other$tickerType != null : !this$tickerType.equals(other$tickerType)) return false;
        if (this.getDayTrading() != other.getDayTrading()) return false;
        final Object this$callOrPut = this.getCallOrPut();
        final Object other$callOrPut = other.getCallOrPut();
        if (this$callOrPut == null ? other$callOrPut != null : !this$callOrPut.equals(other$callOrPut)) return false;
        if (this.getDeliveryDay() != other.getDeliveryDay()) return false;
        if (this.getDeliveryMonth() != other.getDeliveryMonth()) return false;
        final Object this$exerciseType = this.getExerciseType();
        final Object other$exerciseType = other.getExerciseType();
        if (this$exerciseType == null ? other$exerciseType != null : !this$exerciseType.equals(other$exerciseType)) return false;
        if (this.getExerciseBeginDate() != other.getExerciseBeginDate()) return false;
        if (this.getExerciseEndDate() != other.getExerciseEndDate()) return false;
        if (Double.compare(this.getExercisePrice(), other.getExercisePrice()) != 0) return false;
        if (this.getQtyUnit() != other.getQtyUnit()) return false;
        if (this.getContractUnit() != other.getContractUnit()) return false;
        if (this.getContractPosition() != other.getContractPosition()) return false;
        if (Double.compare(this.getPrevClosePrice(), other.getPrevClosePrice()) != 0) return false;
        if (Double.compare(this.getPrevClearingPrice(), other.getPrevClearingPrice()) != 0) return false;
        if (this.getLmtBuyMaxQty() != other.getLmtBuyMaxQty()) return false;
        if (this.getLmtBuyMinQty() != other.getLmtBuyMinQty()) return false;
        if (this.getLmtSellMaxQty() != other.getLmtSellMaxQty()) return false;
        if (this.getLmtSellMinQty() != other.getLmtSellMinQty()) return false;
        if (this.getMktBuyMaxQty() != other.getMktBuyMaxQty()) return false;
        if (this.getMktBuyMinQty() != other.getMktBuyMinQty()) return false;
        if (this.getMktSellMaxQty() != other.getMktSellMaxQty()) return false;
        if (this.getMktSellMinQty() != other.getMktSellMinQty()) return false;
        if (Double.compare(this.getPriceTick(), other.getPriceTick()) != 0) return false;
        if (Double.compare(this.getUpperLimitPrice(), other.getUpperLimitPrice()) != 0) return false;
        if (Double.compare(this.getLowerLimitPrice(), other.getLowerLimitPrice()) != 0) return false;
        if (Double.compare(this.getSellMargin(), other.getSellMargin()) != 0) return false;
        if (Double.compare(this.getMarginRatioParam1(), other.getMarginRatioParam1()) != 0) return false;
        if (Double.compare(this.getMarginRatioParam2(), other.getMarginRatioParam2()) != 0) return false;
        if (this.getRequestId() != other.getRequestId()) return false;
        if (this.isLastResp() != other.isLastResp()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof OptionAuctionInfoResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        final Object $securityIdSource = this.getSecurityIdSource();
        result = result * PRIME + ($securityIdSource == null ? 43 : $securityIdSource.hashCode());
        final Object $symbol = this.getSymbol();
        result = result * PRIME + ($symbol == null ? 43 : $symbol.hashCode());
        final Object $contractId = this.getContractId();
        result = result * PRIME + ($contractId == null ? 43 : $contractId.hashCode());
        final Object $underlyingSecurityId = this.getUnderlyingSecurityId();
        result = result * PRIME + ($underlyingSecurityId == null ? 43 : $underlyingSecurityId.hashCode());
        final Object $underlyingSecurityIdSource = this.getUnderlyingSecurityIdSource();
        result = result * PRIME + ($underlyingSecurityIdSource == null ? 43 : $underlyingSecurityIdSource.hashCode());
        final long $listDate = this.getListDate();
        result = result * PRIME + (int) ($listDate >>> 32 ^ $listDate);
        final long $lastTradeDate = this.getLastTradeDate();
        result = result * PRIME + (int) ($lastTradeDate >>> 32 ^ $lastTradeDate);
        final Object $tickerType = this.getTickerType();
        result = result * PRIME + ($tickerType == null ? 43 : $tickerType.hashCode());
        result = result * PRIME + this.getDayTrading();
        final Object $callOrPut = this.getCallOrPut();
        result = result * PRIME + ($callOrPut == null ? 43 : $callOrPut.hashCode());
        final long $deliveryDay = this.getDeliveryDay();
        result = result * PRIME + (int) ($deliveryDay >>> 32 ^ $deliveryDay);
        final long $deliveryMonth = this.getDeliveryMonth();
        result = result * PRIME + (int) ($deliveryMonth >>> 32 ^ $deliveryMonth);
        final Object $exerciseType = this.getExerciseType();
        result = result * PRIME + ($exerciseType == null ? 43 : $exerciseType.hashCode());
        final long $exerciseBeginDate = this.getExerciseBeginDate();
        result = result * PRIME + (int) ($exerciseBeginDate >>> 32 ^ $exerciseBeginDate);
        final long $exerciseEndDate = this.getExerciseEndDate();
        result = result * PRIME + (int) ($exerciseEndDate >>> 32 ^ $exerciseEndDate);
        final long $exercisePrice = Double.doubleToLongBits(this.getExercisePrice());
        result = result * PRIME + (int) ($exercisePrice >>> 32 ^ $exercisePrice);
        final long $qtyUnit = this.getQtyUnit();
        result = result * PRIME + (int) ($qtyUnit >>> 32 ^ $qtyUnit);
        final long $contractUnit = this.getContractUnit();
        result = result * PRIME + (int) ($contractUnit >>> 32 ^ $contractUnit);
        final long $contractPosition = this.getContractPosition();
        result = result * PRIME + (int) ($contractPosition >>> 32 ^ $contractPosition);
        final long $prevClosePrice = Double.doubleToLongBits(this.getPrevClosePrice());
        result = result * PRIME + (int) ($prevClosePrice >>> 32 ^ $prevClosePrice);
        final long $prevClearingPrice = Double.doubleToLongBits(this.getPrevClearingPrice());
        result = result * PRIME + (int) ($prevClearingPrice >>> 32 ^ $prevClearingPrice);
        final long $lmtBuyMaxQty = this.getLmtBuyMaxQty();
        result = result * PRIME + (int) ($lmtBuyMaxQty >>> 32 ^ $lmtBuyMaxQty);
        final long $lmtBuyMinQty = this.getLmtBuyMinQty();
        result = result * PRIME + (int) ($lmtBuyMinQty >>> 32 ^ $lmtBuyMinQty);
        final long $lmtSellMaxQty = this.getLmtSellMaxQty();
        result = result * PRIME + (int) ($lmtSellMaxQty >>> 32 ^ $lmtSellMaxQty);
        final long $lmtSellMinQty = this.getLmtSellMinQty();
        result = result * PRIME + (int) ($lmtSellMinQty >>> 32 ^ $lmtSellMinQty);
        final long $mktBuyMaxQty = this.getMktBuyMaxQty();
        result = result * PRIME + (int) ($mktBuyMaxQty >>> 32 ^ $mktBuyMaxQty);
        final long $mktBuyMinQty = this.getMktBuyMinQty();
        result = result * PRIME + (int) ($mktBuyMinQty >>> 32 ^ $mktBuyMinQty);
        final long $mktSellMaxQty = this.getMktSellMaxQty();
        result = result * PRIME + (int) ($mktSellMaxQty >>> 32 ^ $mktSellMaxQty);
        final long $mktSellMinQty = this.getMktSellMinQty();
        result = result * PRIME + (int) ($mktSellMinQty >>> 32 ^ $mktSellMinQty);
        final long $priceTick = Double.doubleToLongBits(this.getPriceTick());
        result = result * PRIME + (int) ($priceTick >>> 32 ^ $priceTick);
        final long $upperLimitPrice = Double.doubleToLongBits(this.getUpperLimitPrice());
        result = result * PRIME + (int) ($upperLimitPrice >>> 32 ^ $upperLimitPrice);
        final long $lowerLimitPrice = Double.doubleToLongBits(this.getLowerLimitPrice());
        result = result * PRIME + (int) ($lowerLimitPrice >>> 32 ^ $lowerLimitPrice);
        final long $sellMargin = Double.doubleToLongBits(this.getSellMargin());
        result = result * PRIME + (int) ($sellMargin >>> 32 ^ $sellMargin);
        final long $marginRatioParam1 = Double.doubleToLongBits(this.getMarginRatioParam1());
        result = result * PRIME + (int) ($marginRatioParam1 >>> 32 ^ $marginRatioParam1);
        final long $marginRatioParam2 = Double.doubleToLongBits(this.getMarginRatioParam2());
        result = result * PRIME + (int) ($marginRatioParam2 >>> 32 ^ $marginRatioParam2);
        result = result * PRIME + this.getRequestId();
        result = result * PRIME + (this.isLastResp() ? 79 : 97);
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "OptionAuctionInfoResponse(ticker=" + this.getTicker() + ", securityIdSource=" + this.getSecurityIdSource() + ", symbol=" + this.getSymbol() + ", contractId=" + this.getContractId() + ", underlyingSecurityId=" + this.getUnderlyingSecurityId() + ", underlyingSecurityIdSource=" + this.getUnderlyingSecurityIdSource() + ", listDate=" + this.getListDate() + ", lastTradeDate=" + this.getLastTradeDate() + ", tickerType=" + this.getTickerType() + ", dayTrading=" + this.getDayTrading() + ", callOrPut=" + this.getCallOrPut() + ", deliveryDay=" + this.getDeliveryDay() + ", deliveryMonth=" + this.getDeliveryMonth() + ", exerciseType=" + this.getExerciseType() + ", exerciseBeginDate=" + this.getExerciseBeginDate() + ", exerciseEndDate=" + this.getExerciseEndDate() + ", exercisePrice=" + this.getExercisePrice() + ", qtyUnit=" + this.getQtyUnit() + ", contractUnit=" + this.getContractUnit() + ", contractPosition=" + this.getContractPosition() + ", prevClosePrice=" + this.getPrevClosePrice() + ", prevClearingPrice=" + this.getPrevClearingPrice() + ", lmtBuyMaxQty=" + this.getLmtBuyMaxQty() + ", lmtBuyMinQty=" + this.getLmtBuyMinQty() + ", lmtSellMaxQty=" + this.getLmtSellMaxQty() + ", lmtSellMinQty=" + this.getLmtSellMinQty() + ", mktBuyMaxQty=" + this.getMktBuyMaxQty() + ", mktBuyMinQty=" + this.getMktBuyMinQty() + ", mktSellMaxQty=" + this.getMktSellMaxQty() + ", mktSellMinQty=" + this.getMktSellMinQty() + ", priceTick=" + this.getPriceTick() + ", upperLimitPrice=" + this.getUpperLimitPrice() + ", lowerLimitPrice=" + this.getLowerLimitPrice() + ", sellMargin=" + this.getSellMargin() + ", marginRatioParam1=" + this.getMarginRatioParam1() + ", marginRatioParam2=" + this.getMarginRatioParam2() + ", requestId=" + this.getRequestId() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public OptionAuctionInfoResponse() {
    }

    @SuppressWarnings("all")
    public OptionAuctionInfoResponse(final String ticker, final MarketType securityIdSource, final String symbol, final String contractId, final String underlyingSecurityId, final MarketType underlyingSecurityIdSource, final long listDate, final long lastTradeDate, final TickerType tickerType, final int dayTrading, final OptCallOrPutType callOrPut, final long deliveryDay, final long deliveryMonth, final OptExerciseType exerciseType, final long exerciseBeginDate, final long exerciseEndDate, final double exercisePrice, final long qtyUnit, final long contractUnit, final long contractPosition, final double prevClosePrice, final double prevClearingPrice, final long lmtBuyMaxQty, final long lmtBuyMinQty, final long lmtSellMaxQty, final long lmtSellMinQty, final long mktBuyMaxQty, final long mktBuyMinQty, final long mktSellMaxQty, final long mktSellMinQty, final double priceTick, final double upperLimitPrice, final double lowerLimitPrice, final double sellMargin, final double marginRatioParam1, final double marginRatioParam2, final int requestId, final boolean lastResp) {
        this.ticker = ticker;
        this.securityIdSource = securityIdSource;
        this.symbol = symbol;
        this.contractId = contractId;
        this.underlyingSecurityId = underlyingSecurityId;
        this.underlyingSecurityIdSource = underlyingSecurityIdSource;
        this.listDate = listDate;
        this.lastTradeDate = lastTradeDate;
        this.tickerType = tickerType;
        this.dayTrading = dayTrading;
        this.callOrPut = callOrPut;
        this.deliveryDay = deliveryDay;
        this.deliveryMonth = deliveryMonth;
        this.exerciseType = exerciseType;
        this.exerciseBeginDate = exerciseBeginDate;
        this.exerciseEndDate = exerciseEndDate;
        this.exercisePrice = exercisePrice;
        this.qtyUnit = qtyUnit;
        this.contractUnit = contractUnit;
        this.contractPosition = contractPosition;
        this.prevClosePrice = prevClosePrice;
        this.prevClearingPrice = prevClearingPrice;
        this.lmtBuyMaxQty = lmtBuyMaxQty;
        this.lmtBuyMinQty = lmtBuyMinQty;
        this.lmtSellMaxQty = lmtSellMaxQty;
        this.lmtSellMinQty = lmtSellMinQty;
        this.mktBuyMaxQty = mktBuyMaxQty;
        this.mktBuyMinQty = mktBuyMinQty;
        this.mktSellMaxQty = mktSellMaxQty;
        this.mktSellMinQty = mktSellMinQty;
        this.priceTick = priceTick;
        this.upperLimitPrice = upperLimitPrice;
        this.lowerLimitPrice = lowerLimitPrice;
        this.sellMargin = sellMargin;
        this.marginRatioParam1 = marginRatioParam1;
        this.marginRatioParam2 = marginRatioParam2;
        this.requestId = requestId;
        this.lastResp = lastResp;
    }
}
