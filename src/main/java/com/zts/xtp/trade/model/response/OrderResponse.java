// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.trade.model.response;

import com.zts.xtp.common.enums.*;

public class OrderResponse {
    /**
     * XTP系统订单ID，在XTP系统中唯一
     */
    private String orderXtpId;
    /**
     * 报单引用，用户自定义
     */
    private int orderClientId;
    /**
     * 报单操作引用，用户自定义
     */
    private int orderCancelClientId;
    /**
     * 撤单在XTP系统中的id，在XTP系统中唯一
     */
    private String orderCancelXtpId;
    /**
     * 合约代码
     */
    private String ticker;
    /**
     * 交易市场
     */
    private MarketType marketType;
    /**
     * 价格
     */
    private double price;
    /**
     * 数量，此订单的报单数量
     */
    private long quantity;
    /**
     * 报单价格条件
     */
    private PriceType priceType;
    /**
     * 买卖方向
     */
    private SideType sideType;
    /**
     * 开平标志
     */
    private PositionEffectType positionEffectType;
    /**
     * 业务类型
     */
    private BusinessType businessType;
    /**
     * 今成交数量，为此订单累计成交数量
     */
    private long qtyTraded;
    /**
     * 剩余数量，当撤单成功时，表示撤单数量
     */
    private long qtyLeft;
    /**
     * 委托时间，格式为YYYYMMDDHHMMSSsss
     */
    private long insertTime;
    /**
     * 最后修改时间，格式为YYYYMMDDHHMMSSsss
     */
    private long updateTime;
    /**
     * 撤销时间，格式为YYYYMMDDHHMMSSsss
     */
    private long cancelTime;
    /**
     * 成交金额，为此订单的成交总金额
     */
    private double tradeAmount;
    /**
     * 本地报单编号 OMS生成的单号，不等同于order_xtp_id，为服务器传到报盘的单号
     */
    private String orderLocalId;
    /**
     * 报单状态，订单响应中没有部分成交状态的推送，在查询订单结果中，会有部分成交状态
     */
    private OrderStatusType orderStatusType;
    /**
     * 报单提交状态，OMS内部使用，用户无需关心
     */
    private OrderSubmitStatusType orderSubmitStatusType;
    /**
     * 报单类型
     */
    private char txtPOrderTypeType;
    /**
     * 此消息响应函数对应的请求ID
     */
    private int requestId;
    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    private boolean lastResp;

    public void setMarketType(int type) {
        marketType = MarketType.values()[type];
    }

    public void setPriceType(int type) {
        priceType = PriceType.forType(type);
    }

    public void setSideType(int type) {
        sideType = SideType.forType(type);
    }

    public void setPositionEffectType(int type) {
        if (type > 7) type = 7;
        positionEffectType = PositionEffectType.values()[type];
    }

    public void setBusinessType(int type) {
        businessType = BusinessType.values()[type];
    }

    public void setOrderStatusType(int type) {
        orderStatusType = OrderStatusType.values()[type];
    }

    public void setOrderSubmitStatusType(int type) {
        orderSubmitStatusType = OrderSubmitStatusType.forType(type);
    }


    @SuppressWarnings("all")
    public static class OrderResponseBuilder {
        @SuppressWarnings("all")
        private String orderXtpId;
        @SuppressWarnings("all")
        private int orderClientId;
        @SuppressWarnings("all")
        private int orderCancelClientId;
        @SuppressWarnings("all")
        private String orderCancelXtpId;
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private MarketType marketType;
        @SuppressWarnings("all")
        private double price;
        @SuppressWarnings("all")
        private long quantity;
        @SuppressWarnings("all")
        private PriceType priceType;
        @SuppressWarnings("all")
        private SideType sideType;
        @SuppressWarnings("all")
        private PositionEffectType positionEffectType;
        @SuppressWarnings("all")
        private BusinessType businessType;
        @SuppressWarnings("all")
        private long qtyTraded;
        @SuppressWarnings("all")
        private long qtyLeft;
        @SuppressWarnings("all")
        private long insertTime;
        @SuppressWarnings("all")
        private long updateTime;
        @SuppressWarnings("all")
        private long cancelTime;
        @SuppressWarnings("all")
        private double tradeAmount;
        @SuppressWarnings("all")
        private String orderLocalId;
        @SuppressWarnings("all")
        private OrderStatusType orderStatusType;
        @SuppressWarnings("all")
        private OrderSubmitStatusType orderSubmitStatusType;
        @SuppressWarnings("all")
        private char txtPOrderTypeType;
        @SuppressWarnings("all")
        private int requestId;
        @SuppressWarnings("all")
        private boolean lastResp;

        @SuppressWarnings("all")
        OrderResponseBuilder() {
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderXtpId(final String orderXtpId) {
            this.orderXtpId = orderXtpId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderClientId(final int orderClientId) {
            this.orderClientId = orderClientId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderCancelClientId(final int orderCancelClientId) {
            this.orderCancelClientId = orderCancelClientId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderCancelXtpId(final String orderCancelXtpId) {
            this.orderCancelXtpId = orderCancelXtpId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder marketType(final MarketType marketType) {
            this.marketType = marketType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder price(final double price) {
            this.price = price;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder quantity(final long quantity) {
            this.quantity = quantity;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder priceType(final PriceType priceType) {
            this.priceType = priceType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder sideType(final SideType sideType) {
            this.sideType = sideType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder positionEffectType(final PositionEffectType positionEffectType) {
            this.positionEffectType = positionEffectType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder businessType(final BusinessType businessType) {
            this.businessType = businessType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder qtyTraded(final long qtyTraded) {
            this.qtyTraded = qtyTraded;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder qtyLeft(final long qtyLeft) {
            this.qtyLeft = qtyLeft;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder insertTime(final long insertTime) {
            this.insertTime = insertTime;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder updateTime(final long updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder cancelTime(final long cancelTime) {
            this.cancelTime = cancelTime;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder tradeAmount(final double tradeAmount) {
            this.tradeAmount = tradeAmount;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderLocalId(final String orderLocalId) {
            this.orderLocalId = orderLocalId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderStatusType(final OrderStatusType orderStatusType) {
            this.orderStatusType = orderStatusType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder orderSubmitStatusType(final OrderSubmitStatusType orderSubmitStatusType) {
            this.orderSubmitStatusType = orderSubmitStatusType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder txtPOrderTypeType(final char txtPOrderTypeType) {
            this.txtPOrderTypeType = txtPOrderTypeType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder requestId(final int requestId) {
            this.requestId = requestId;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponseBuilder lastResp(final boolean lastResp) {
            this.lastResp = lastResp;
            return this;
        }

        @SuppressWarnings("all")
        public OrderResponse build() {
            return new OrderResponse(orderXtpId, orderClientId, orderCancelClientId, orderCancelXtpId, ticker, marketType, price, quantity, priceType, sideType, positionEffectType, businessType, qtyTraded, qtyLeft, insertTime, updateTime, cancelTime, tradeAmount, orderLocalId, orderStatusType, orderSubmitStatusType, txtPOrderTypeType, requestId, lastResp);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "OrderResponse.OrderResponseBuilder(orderXtpId=" + this.orderXtpId + ", orderClientId=" + this.orderClientId + ", orderCancelClientId=" + this.orderCancelClientId + ", orderCancelXtpId=" + this.orderCancelXtpId + ", ticker=" + this.ticker + ", marketType=" + this.marketType + ", price=" + this.price + ", quantity=" + this.quantity + ", priceType=" + this.priceType + ", sideType=" + this.sideType + ", positionEffectType=" + this.positionEffectType + ", businessType=" + this.businessType + ", qtyTraded=" + this.qtyTraded + ", qtyLeft=" + this.qtyLeft + ", insertTime=" + this.insertTime + ", updateTime=" + this.updateTime + ", cancelTime=" + this.cancelTime + ", tradeAmount=" + this.tradeAmount + ", orderLocalId=" + this.orderLocalId + ", orderStatusType=" + this.orderStatusType + ", orderSubmitStatusType=" + this.orderSubmitStatusType + ", txtPOrderTypeType=" + this.txtPOrderTypeType + ", requestId=" + this.requestId + ", lastResp=" + this.lastResp + ")";
        }
    }

    @SuppressWarnings("all")
    public static OrderResponseBuilder builder() {
        return new OrderResponseBuilder();
    }

    /**
     * XTP系统订单ID，在XTP系统中唯一
     */
    @SuppressWarnings("all")
    public String getOrderXtpId() {
        return this.orderXtpId;
    }

    /**
     * 报单引用，用户自定义
     */
    @SuppressWarnings("all")
    public int getOrderClientId() {
        return this.orderClientId;
    }

    /**
     * 报单操作引用，用户自定义
     */
    @SuppressWarnings("all")
    public int getOrderCancelClientId() {
        return this.orderCancelClientId;
    }

    /**
     * 撤单在XTP系统中的id，在XTP系统中唯一
     */
    @SuppressWarnings("all")
    public String getOrderCancelXtpId() {
        return this.orderCancelXtpId;
    }

    /**
     * 合约代码
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 交易市场
     */
    @SuppressWarnings("all")
    public MarketType getMarketType() {
        return this.marketType;
    }

    /**
     * 价格
     */
    @SuppressWarnings("all")
    public double getPrice() {
        return this.price;
    }

    /**
     * 数量，此订单的报单数量
     */
    @SuppressWarnings("all")
    public long getQuantity() {
        return this.quantity;
    }

    /**
     * 报单价格条件
     */
    @SuppressWarnings("all")
    public PriceType getPriceType() {
        return this.priceType;
    }

    /**
     * 买卖方向
     */
    @SuppressWarnings("all")
    public SideType getSideType() {
        return this.sideType;
    }

    /**
     * 开平标志
     */
    @SuppressWarnings("all")
    public PositionEffectType getPositionEffectType() {
        return this.positionEffectType;
    }

    /**
     * 业务类型
     */
    @SuppressWarnings("all")
    public BusinessType getBusinessType() {
        return this.businessType;
    }

    /**
     * 今成交数量，为此订单累计成交数量
     */
    @SuppressWarnings("all")
    public long getQtyTraded() {
        return this.qtyTraded;
    }

    /**
     * 剩余数量，当撤单成功时，表示撤单数量
     */
    @SuppressWarnings("all")
    public long getQtyLeft() {
        return this.qtyLeft;
    }

    /**
     * 委托时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public long getInsertTime() {
        return this.insertTime;
    }

    /**
     * 最后修改时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public long getUpdateTime() {
        return this.updateTime;
    }

    /**
     * 撤销时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public long getCancelTime() {
        return this.cancelTime;
    }

    /**
     * 成交金额，为此订单的成交总金额
     */
    @SuppressWarnings("all")
    public double getTradeAmount() {
        return this.tradeAmount;
    }

    /**
     * 本地报单编号 OMS生成的单号，不等同于order_xtp_id，为服务器传到报盘的单号
     */
    @SuppressWarnings("all")
    public String getOrderLocalId() {
        return this.orderLocalId;
    }

    /**
     * 报单状态，订单响应中没有部分成交状态的推送，在查询订单结果中，会有部分成交状态
     */
    @SuppressWarnings("all")
    public OrderStatusType getOrderStatusType() {
        return this.orderStatusType;
    }

    /**
     * 报单提交状态，OMS内部使用，用户无需关心
     */
    @SuppressWarnings("all")
    public OrderSubmitStatusType getOrderSubmitStatusType() {
        return this.orderSubmitStatusType;
    }

    /**
     * 报单类型
     */
    @SuppressWarnings("all")
    public char getTxtPOrderTypeType() {
        return this.txtPOrderTypeType;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public int getRequestId() {
        return this.requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * XTP系统订单ID，在XTP系统中唯一
     */
    @SuppressWarnings("all")
    public void setOrderXtpId(final String orderXtpId) {
        this.orderXtpId = orderXtpId;
    }

    /**
     * 报单引用，用户自定义
     */
    @SuppressWarnings("all")
    public void setOrderClientId(final int orderClientId) {
        this.orderClientId = orderClientId;
    }

    /**
     * 报单操作引用，用户自定义
     */
    @SuppressWarnings("all")
    public void setOrderCancelClientId(final int orderCancelClientId) {
        this.orderCancelClientId = orderCancelClientId;
    }

    /**
     * 撤单在XTP系统中的id，在XTP系统中唯一
     */
    @SuppressWarnings("all")
    public void setOrderCancelXtpId(final String orderCancelXtpId) {
        this.orderCancelXtpId = orderCancelXtpId;
    }

    /**
     * 合约代码
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 价格
     */
    @SuppressWarnings("all")
    public void setPrice(final double price) {
        this.price = price;
    }

    /**
     * 数量，此订单的报单数量
     */
    @SuppressWarnings("all")
    public void setQuantity(final long quantity) {
        this.quantity = quantity;
    }

    /**
     * 今成交数量，为此订单累计成交数量
     */
    @SuppressWarnings("all")
    public void setQtyTraded(final long qtyTraded) {
        this.qtyTraded = qtyTraded;
    }

    /**
     * 剩余数量，当撤单成功时，表示撤单数量
     */
    @SuppressWarnings("all")
    public void setQtyLeft(final long qtyLeft) {
        this.qtyLeft = qtyLeft;
    }

    /**
     * 委托时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public void setInsertTime(final long insertTime) {
        this.insertTime = insertTime;
    }

    /**
     * 最后修改时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public void setUpdateTime(final long updateTime) {
        this.updateTime = updateTime;
    }

    /**
     * 撤销时间，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public void setCancelTime(final long cancelTime) {
        this.cancelTime = cancelTime;
    }

    /**
     * 成交金额，为此订单的成交总金额
     */
    @SuppressWarnings("all")
    public void setTradeAmount(final double tradeAmount) {
        this.tradeAmount = tradeAmount;
    }

    /**
     * 本地报单编号 OMS生成的单号，不等同于order_xtp_id，为服务器传到报盘的单号
     */
    @SuppressWarnings("all")
    public void setOrderLocalId(final String orderLocalId) {
        this.orderLocalId = orderLocalId;
    }

    /**
     * 报单类型
     */
    @SuppressWarnings("all")
    public void setTxtPOrderTypeType(final char txtPOrderTypeType) {
        this.txtPOrderTypeType = txtPOrderTypeType;
    }

    /**
     * 此消息响应函数对应的请求ID
     */
    @SuppressWarnings("all")
    public void setRequestId(final int requestId) {
        this.requestId = requestId;
    }

    /**
     * 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "OrderResponse(orderXtpId=" + this.getOrderXtpId() + ", orderClientId=" + this.getOrderClientId() + ", orderCancelClientId=" + this.getOrderCancelClientId() + ", orderCancelXtpId=" + this.getOrderCancelXtpId() + ", ticker=" + this.getTicker() + ", marketType=" + this.getMarketType() + ", price=" + this.getPrice() + ", quantity=" + this.getQuantity() + ", priceType=" + this.getPriceType() + ", sideType=" + this.getSideType() + ", positionEffectType=" + this.getPositionEffectType() + ", businessType=" + this.getBusinessType() + ", qtyTraded=" + this.getQtyTraded() + ", qtyLeft=" + this.getQtyLeft() + ", insertTime=" + this.getInsertTime() + ", updateTime=" + this.getUpdateTime() + ", cancelTime=" + this.getCancelTime() + ", tradeAmount=" + this.getTradeAmount() + ", orderLocalId=" + this.getOrderLocalId() + ", orderStatusType=" + this.getOrderStatusType() + ", orderSubmitStatusType=" + this.getOrderSubmitStatusType() + ", txtPOrderTypeType=" + this.getTxtPOrderTypeType() + ", requestId=" + this.getRequestId() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public OrderResponse() {
    }

    @SuppressWarnings("all")
    public OrderResponse(final String orderXtpId, final int orderClientId, final int orderCancelClientId, final String orderCancelXtpId, final String ticker, final MarketType marketType, final double price, final long quantity, final PriceType priceType, final SideType sideType, final PositionEffectType positionEffectType, final BusinessType businessType, final long qtyTraded, final long qtyLeft, final long insertTime, final long updateTime, final long cancelTime, final double tradeAmount, final String orderLocalId, final OrderStatusType orderStatusType, final OrderSubmitStatusType orderSubmitStatusType, final char txtPOrderTypeType, final int requestId, final boolean lastResp) {
        this.orderXtpId = orderXtpId;
        this.orderClientId = orderClientId;
        this.orderCancelClientId = orderCancelClientId;
        this.orderCancelXtpId = orderCancelXtpId;
        this.ticker = ticker;
        this.marketType = marketType;
        this.price = price;
        this.quantity = quantity;
        this.priceType = priceType;
        this.sideType = sideType;
        this.positionEffectType = positionEffectType;
        this.businessType = businessType;
        this.qtyTraded = qtyTraded;
        this.qtyLeft = qtyLeft;
        this.insertTime = insertTime;
        this.updateTime = updateTime;
        this.cancelTime = cancelTime;
        this.tradeAmount = tradeAmount;
        this.orderLocalId = orderLocalId;
        this.orderStatusType = orderStatusType;
        this.orderSubmitStatusType = orderSubmitStatusType;
        this.txtPOrderTypeType = txtPOrderTypeType;
        this.requestId = requestId;
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof OrderResponse)) return false;
        final OrderResponse other = (OrderResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$orderXtpId = this.getOrderXtpId();
        final Object other$orderXtpId = other.getOrderXtpId();
        if (this$orderXtpId == null ? other$orderXtpId != null : !this$orderXtpId.equals(other$orderXtpId)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof OrderResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $orderXtpId = this.getOrderXtpId();
        result = result * PRIME + ($orderXtpId == null ? 43 : $orderXtpId.hashCode());
        return result;
    }
}
