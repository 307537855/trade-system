// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.quote.model.response;

import com.zts.xtp.common.enums.ExchangeType;
import com.zts.xtp.common.enums.MarketDataType;

public class DepthMarketDataResponse {
    /**
     * 交易所代码
     */
    private ExchangeType exchangeType;
    /**
     * 合约代码（不包含交易所信息）
     */
    private String ticker;
    /**
     * 最新价
     */
    private double lastPrice;
    /**
     * 昨收盘
     */
    private double preClosePrice;
    /**
     * 今开盘
     */
    private double openPrice;
    /**
     * 最高价
     */
    private double highPrice;
    /**
     * 最低价
     */
    private double lowPrice;
    /**
     * 今收盘
     */
    private double closePrice;
    /**
     * 昨日持仓量(张)(目前未填写)
     */
    private long preTotalLongPositon;
    /**
     * 持仓量(张)
     */
    private long totalLongPositon;
    /**
     * 昨日结算价
     */
    private double preSettlementPrice;
    /**
     * 今日结算价
     */
    private double settlementPrice;
    /**
     * 涨停价
     */
    private double upperLimitPrice;
    /**
     * 跌停价
     */
    private double lowerLimitPrice;
    /**
     * 预留
     */
    private double preDelta;
    /**
     * 预留
     */
    private double currDelta;
    /**
     * 时间类，格式为YYYYMMDDHHMMSSsss
     */
    private long dataTime;
    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    private long qty;
    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    private double turnover;
    /**
     * 当日均价=(turnover/qty)
     */
    private double avgPrice;
    /**
     * 十档申买价
     */
    private double[] bid;
    /**
     * 十档申卖价
     */
    private double[] ask;
    /**
     * 十档申买量
     */
    private long[] bidQty;
    /**
     * 十档申卖量
     */
    private long[] askQty;
    /**
     * 成交笔数
     */
    private long tradesCount;
    /**
     * 当前交易状态说明
     */
    private String tickerStatus;
    /**
     * 股票、基金、债券等额外数据
     */
    private MarketDataStockExDataResponse stk;
    /**
     * 期权额外数据
     */
    private MarketDataOptionExDataResponse opt;
    /**
     * 决定了额外数据是哪种数据类型 stk or opt
     */
    private MarketDataType dataType;

    public void setDataType(int type) {
        if (MarketDataType.values().length - 1 < type) {
            this.dataType = MarketDataType.XTP_MARKETDATA_ACTUAL;//如果类型未找到，默认现货
            System.err.println("Error: received MarketDataType value exceed MarketDataType enum size, receive=" + type);
        } else {
            this.dataType = MarketDataType.values()[type];
        }
    }

    public void setExchangeType(int type) {
        this.exchangeType = ExchangeType.forType(type);
    }


    @SuppressWarnings("all")
    public static class DepthMarketDataResponseBuilder {
        @SuppressWarnings("all")
        private ExchangeType exchangeType;
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private double lastPrice;
        @SuppressWarnings("all")
        private double preClosePrice;
        @SuppressWarnings("all")
        private double openPrice;
        @SuppressWarnings("all")
        private double highPrice;
        @SuppressWarnings("all")
        private double lowPrice;
        @SuppressWarnings("all")
        private double closePrice;
        @SuppressWarnings("all")
        private long preTotalLongPositon;
        @SuppressWarnings("all")
        private long totalLongPositon;
        @SuppressWarnings("all")
        private double preSettlementPrice;
        @SuppressWarnings("all")
        private double settlementPrice;
        @SuppressWarnings("all")
        private double upperLimitPrice;
        @SuppressWarnings("all")
        private double lowerLimitPrice;
        @SuppressWarnings("all")
        private double preDelta;
        @SuppressWarnings("all")
        private double currDelta;
        @SuppressWarnings("all")
        private long dataTime;
        @SuppressWarnings("all")
        private long qty;
        @SuppressWarnings("all")
        private double turnover;
        @SuppressWarnings("all")
        private double avgPrice;
        @SuppressWarnings("all")
        private double[] bid;
        @SuppressWarnings("all")
        private double[] ask;
        @SuppressWarnings("all")
        private long[] bidQty;
        @SuppressWarnings("all")
        private long[] askQty;
        @SuppressWarnings("all")
        private long tradesCount;
        @SuppressWarnings("all")
        private String tickerStatus;
        @SuppressWarnings("all")
        private MarketDataStockExDataResponse stk;
        @SuppressWarnings("all")
        private MarketDataOptionExDataResponse opt;
        @SuppressWarnings("all")
        private MarketDataType dataType;

        @SuppressWarnings("all")
        DepthMarketDataResponseBuilder() {
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder exchangeType(final ExchangeType exchangeType) {
            this.exchangeType = exchangeType;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder lastPrice(final double lastPrice) {
            this.lastPrice = lastPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder preClosePrice(final double preClosePrice) {
            this.preClosePrice = preClosePrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder openPrice(final double openPrice) {
            this.openPrice = openPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder highPrice(final double highPrice) {
            this.highPrice = highPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder lowPrice(final double lowPrice) {
            this.lowPrice = lowPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder closePrice(final double closePrice) {
            this.closePrice = closePrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder preTotalLongPositon(final long preTotalLongPositon) {
            this.preTotalLongPositon = preTotalLongPositon;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder totalLongPositon(final long totalLongPositon) {
            this.totalLongPositon = totalLongPositon;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder preSettlementPrice(final double preSettlementPrice) {
            this.preSettlementPrice = preSettlementPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder settlementPrice(final double settlementPrice) {
            this.settlementPrice = settlementPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder upperLimitPrice(final double upperLimitPrice) {
            this.upperLimitPrice = upperLimitPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder lowerLimitPrice(final double lowerLimitPrice) {
            this.lowerLimitPrice = lowerLimitPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder preDelta(final double preDelta) {
            this.preDelta = preDelta;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder currDelta(final double currDelta) {
            this.currDelta = currDelta;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder dataTime(final long dataTime) {
            this.dataTime = dataTime;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder qty(final long qty) {
            this.qty = qty;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder turnover(final double turnover) {
            this.turnover = turnover;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder avgPrice(final double avgPrice) {
            this.avgPrice = avgPrice;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder bid(final double[] bid) {
            this.bid = bid;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder ask(final double[] ask) {
            this.ask = ask;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder bidQty(final long[] bidQty) {
            this.bidQty = bidQty;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder askQty(final long[] askQty) {
            this.askQty = askQty;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder tradesCount(final long tradesCount) {
            this.tradesCount = tradesCount;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder tickerStatus(final String tickerStatus) {
            this.tickerStatus = tickerStatus;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder stk(final MarketDataStockExDataResponse stk) {
            this.stk = stk;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder opt(final MarketDataOptionExDataResponse opt) {
            this.opt = opt;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponseBuilder dataType(final MarketDataType dataType) {
            this.dataType = dataType;
            return this;
        }

        @SuppressWarnings("all")
        public DepthMarketDataResponse build() {
            return new DepthMarketDataResponse(exchangeType, ticker, lastPrice, preClosePrice, openPrice, highPrice, lowPrice, closePrice, preTotalLongPositon, totalLongPositon, preSettlementPrice, settlementPrice, upperLimitPrice, lowerLimitPrice, preDelta, currDelta, dataTime, qty, turnover, avgPrice, bid, ask, bidQty, askQty, tradesCount, tickerStatus, stk, opt, dataType);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "DepthMarketDataResponse.DepthMarketDataResponseBuilder(exchangeType=" + this.exchangeType + ", ticker=" + this.ticker + ", lastPrice=" + this.lastPrice + ", preClosePrice=" + this.preClosePrice + ", openPrice=" + this.openPrice + ", highPrice=" + this.highPrice + ", lowPrice=" + this.lowPrice + ", closePrice=" + this.closePrice + ", preTotalLongPositon=" + this.preTotalLongPositon + ", totalLongPositon=" + this.totalLongPositon + ", preSettlementPrice=" + this.preSettlementPrice + ", settlementPrice=" + this.settlementPrice + ", upperLimitPrice=" + this.upperLimitPrice + ", lowerLimitPrice=" + this.lowerLimitPrice + ", preDelta=" + this.preDelta + ", currDelta=" + this.currDelta + ", dataTime=" + this.dataTime + ", qty=" + this.qty + ", turnover=" + this.turnover + ", avgPrice=" + this.avgPrice + ", bid=" + java.util.Arrays.toString(this.bid) + ", ask=" + java.util.Arrays.toString(this.ask) + ", bidQty=" + java.util.Arrays.toString(this.bidQty) + ", askQty=" + java.util.Arrays.toString(this.askQty) + ", tradesCount=" + this.tradesCount + ", tickerStatus=" + this.tickerStatus + ", stk=" + this.stk + ", opt=" + this.opt + ", dataType=" + this.dataType + ")";
        }
    }

    @SuppressWarnings("all")
    public static DepthMarketDataResponseBuilder builder() {
        return new DepthMarketDataResponseBuilder();
    }

    /**
     * 交易所代码
     */
    @SuppressWarnings("all")
    public ExchangeType getExchangeType() {
        return this.exchangeType;
    }

    /**
     * 合约代码（不包含交易所信息）
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public double getLastPrice() {
        return this.lastPrice;
    }

    /**
     * 昨收盘
     */
    @SuppressWarnings("all")
    public double getPreClosePrice() {
        return this.preClosePrice;
    }

    /**
     * 今开盘
     */
    @SuppressWarnings("all")
    public double getOpenPrice() {
        return this.openPrice;
    }

    /**
     * 最高价
     */
    @SuppressWarnings("all")
    public double getHighPrice() {
        return this.highPrice;
    }

    /**
     * 最低价
     */
    @SuppressWarnings("all")
    public double getLowPrice() {
        return this.lowPrice;
    }

    /**
     * 今收盘
     */
    @SuppressWarnings("all")
    public double getClosePrice() {
        return this.closePrice;
    }

    /**
     * 昨日持仓量(张)(目前未填写)
     */
    @SuppressWarnings("all")
    public long getPreTotalLongPositon() {
        return this.preTotalLongPositon;
    }

    /**
     * 持仓量(张)
     */
    @SuppressWarnings("all")
    public long getTotalLongPositon() {
        return this.totalLongPositon;
    }

    /**
     * 昨日结算价
     */
    @SuppressWarnings("all")
    public double getPreSettlementPrice() {
        return this.preSettlementPrice;
    }

    /**
     * 今日结算价
     */
    @SuppressWarnings("all")
    public double getSettlementPrice() {
        return this.settlementPrice;
    }

    /**
     * 涨停价
     */
    @SuppressWarnings("all")
    public double getUpperLimitPrice() {
        return this.upperLimitPrice;
    }

    /**
     * 跌停价
     */
    @SuppressWarnings("all")
    public double getLowerLimitPrice() {
        return this.lowerLimitPrice;
    }

    /**
     * 预留
     */
    @SuppressWarnings("all")
    public double getPreDelta() {
        return this.preDelta;
    }

    /**
     * 预留
     */
    @SuppressWarnings("all")
    public double getCurrDelta() {
        return this.currDelta;
    }

    /**
     * 时间类，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public long getDataTime() {
        return this.dataTime;
    }

    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    @SuppressWarnings("all")
    public long getQty() {
        return this.qty;
    }

    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    @SuppressWarnings("all")
    public double getTurnover() {
        return this.turnover;
    }

    /**
     * 当日均价=(turnover/qty)
     */
    @SuppressWarnings("all")
    public double getAvgPrice() {
        return this.avgPrice;
    }

    /**
     * 十档申买价
     */
    @SuppressWarnings("all")
    public double[] getBid() {
        return this.bid;
    }

    /**
     * 十档申卖价
     */
    @SuppressWarnings("all")
    public double[] getAsk() {
        return this.ask;
    }

    /**
     * 十档申买量
     */
    @SuppressWarnings("all")
    public long[] getBidQty() {
        return this.bidQty;
    }

    /**
     * 十档申卖量
     */
    @SuppressWarnings("all")
    public long[] getAskQty() {
        return this.askQty;
    }

    /**
     * 成交笔数
     */
    @SuppressWarnings("all")
    public long getTradesCount() {
        return this.tradesCount;
    }

    /**
     * 当前交易状态说明
     */
    @SuppressWarnings("all")
    public String getTickerStatus() {
        return this.tickerStatus;
    }

    /**
     * 股票、基金、债券等额外数据
     */
    @SuppressWarnings("all")
    public MarketDataStockExDataResponse getStk() {
        return this.stk;
    }

    /**
     * 期权额外数据
     */
    @SuppressWarnings("all")
    public MarketDataOptionExDataResponse getOpt() {
        return this.opt;
    }

    /**
     * 决定了额外数据是哪种数据类型 stk or opt
     */
    @SuppressWarnings("all")
    public MarketDataType getDataType() {
        return this.dataType;
    }

    /**
     * 合约代码（不包含交易所信息）
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public void setLastPrice(final double lastPrice) {
        this.lastPrice = lastPrice;
    }

    /**
     * 昨收盘
     */
    @SuppressWarnings("all")
    public void setPreClosePrice(final double preClosePrice) {
        this.preClosePrice = preClosePrice;
    }

    /**
     * 今开盘
     */
    @SuppressWarnings("all")
    public void setOpenPrice(final double openPrice) {
        this.openPrice = openPrice;
    }

    /**
     * 最高价
     */
    @SuppressWarnings("all")
    public void setHighPrice(final double highPrice) {
        this.highPrice = highPrice;
    }

    /**
     * 最低价
     */
    @SuppressWarnings("all")
    public void setLowPrice(final double lowPrice) {
        this.lowPrice = lowPrice;
    }

    /**
     * 今收盘
     */
    @SuppressWarnings("all")
    public void setClosePrice(final double closePrice) {
        this.closePrice = closePrice;
    }

    /**
     * 昨日持仓量(张)(目前未填写)
     */
    @SuppressWarnings("all")
    public void setPreTotalLongPositon(final long preTotalLongPositon) {
        this.preTotalLongPositon = preTotalLongPositon;
    }

    /**
     * 持仓量(张)
     */
    @SuppressWarnings("all")
    public void setTotalLongPositon(final long totalLongPositon) {
        this.totalLongPositon = totalLongPositon;
    }

    /**
     * 昨日结算价
     */
    @SuppressWarnings("all")
    public void setPreSettlementPrice(final double preSettlementPrice) {
        this.preSettlementPrice = preSettlementPrice;
    }

    /**
     * 今日结算价
     */
    @SuppressWarnings("all")
    public void setSettlementPrice(final double settlementPrice) {
        this.settlementPrice = settlementPrice;
    }

    /**
     * 涨停价
     */
    @SuppressWarnings("all")
    public void setUpperLimitPrice(final double upperLimitPrice) {
        this.upperLimitPrice = upperLimitPrice;
    }

    /**
     * 跌停价
     */
    @SuppressWarnings("all")
    public void setLowerLimitPrice(final double lowerLimitPrice) {
        this.lowerLimitPrice = lowerLimitPrice;
    }

    /**
     * 预留
     */
    @SuppressWarnings("all")
    public void setPreDelta(final double preDelta) {
        this.preDelta = preDelta;
    }

    /**
     * 预留
     */
    @SuppressWarnings("all")
    public void setCurrDelta(final double currDelta) {
        this.currDelta = currDelta;
    }

    /**
     * 时间类，格式为YYYYMMDDHHMMSSsss
     */
    @SuppressWarnings("all")
    public void setDataTime(final long dataTime) {
        this.dataTime = dataTime;
    }

    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    @SuppressWarnings("all")
    public void setQty(final long qty) {
        this.qty = qty;
    }

    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    @SuppressWarnings("all")
    public void setTurnover(final double turnover) {
        this.turnover = turnover;
    }

    /**
     * 当日均价=(turnover/qty)
     */
    @SuppressWarnings("all")
    public void setAvgPrice(final double avgPrice) {
        this.avgPrice = avgPrice;
    }

    /**
     * 十档申买价
     */
    @SuppressWarnings("all")
    public void setBid(final double[] bid) {
        this.bid = bid;
    }

    /**
     * 十档申卖价
     */
    @SuppressWarnings("all")
    public void setAsk(final double[] ask) {
        this.ask = ask;
    }

    /**
     * 十档申买量
     */
    @SuppressWarnings("all")
    public void setBidQty(final long[] bidQty) {
        this.bidQty = bidQty;
    }

    /**
     * 十档申卖量
     */
    @SuppressWarnings("all")
    public void setAskQty(final long[] askQty) {
        this.askQty = askQty;
    }

    /**
     * 成交笔数
     */
    @SuppressWarnings("all")
    public void setTradesCount(final long tradesCount) {
        this.tradesCount = tradesCount;
    }

    /**
     * 当前交易状态说明
     */
    @SuppressWarnings("all")
    public void setTickerStatus(final String tickerStatus) {
        this.tickerStatus = tickerStatus;
    }

    /**
     * 股票、基金、债券等额外数据
     */
    @SuppressWarnings("all")
    public void setStk(final MarketDataStockExDataResponse stk) {
        this.stk = stk;
    }

    /**
     * 期权额外数据
     */
    @SuppressWarnings("all")
    public void setOpt(final MarketDataOptionExDataResponse opt) {
        this.opt = opt;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "DepthMarketDataResponse(exchangeType=" + this.getExchangeType() + ", ticker=" + this.getTicker() + ", lastPrice=" + this.getLastPrice() + ", preClosePrice=" + this.getPreClosePrice() + ", openPrice=" + this.getOpenPrice() + ", highPrice=" + this.getHighPrice() + ", lowPrice=" + this.getLowPrice() + ", closePrice=" + this.getClosePrice() + ", preTotalLongPositon=" + this.getPreTotalLongPositon() + ", totalLongPositon=" + this.getTotalLongPositon() + ", preSettlementPrice=" + this.getPreSettlementPrice() + ", settlementPrice=" + this.getSettlementPrice() + ", upperLimitPrice=" + this.getUpperLimitPrice() + ", lowerLimitPrice=" + this.getLowerLimitPrice() + ", preDelta=" + this.getPreDelta() + ", currDelta=" + this.getCurrDelta() + ", dataTime=" + this.getDataTime() + ", qty=" + this.getQty() + ", turnover=" + this.getTurnover() + ", avgPrice=" + this.getAvgPrice() + ", bid=" + java.util.Arrays.toString(this.getBid()) + ", ask=" + java.util.Arrays.toString(this.getAsk()) + ", bidQty=" + java.util.Arrays.toString(this.getBidQty()) + ", askQty=" + java.util.Arrays.toString(this.getAskQty()) + ", tradesCount=" + this.getTradesCount() + ", tickerStatus=" + this.getTickerStatus() + ", stk=" + this.getStk() + ", opt=" + this.getOpt() + ", dataType=" + this.getDataType() + ")";
    }

    @SuppressWarnings("all")
    public DepthMarketDataResponse() {
    }

    @SuppressWarnings("all")
    public DepthMarketDataResponse(final ExchangeType exchangeType, final String ticker, final double lastPrice, final double preClosePrice, final double openPrice, final double highPrice, final double lowPrice, final double closePrice, final long preTotalLongPositon, final long totalLongPositon, final double preSettlementPrice, final double settlementPrice, final double upperLimitPrice, final double lowerLimitPrice, final double preDelta, final double currDelta, final long dataTime, final long qty, final double turnover, final double avgPrice, final double[] bid, final double[] ask, final long[] bidQty, final long[] askQty, final long tradesCount, final String tickerStatus, final MarketDataStockExDataResponse stk, final MarketDataOptionExDataResponse opt, final MarketDataType dataType) {
        this.exchangeType = exchangeType;
        this.ticker = ticker;
        this.lastPrice = lastPrice;
        this.preClosePrice = preClosePrice;
        this.openPrice = openPrice;
        this.highPrice = highPrice;
        this.lowPrice = lowPrice;
        this.closePrice = closePrice;
        this.preTotalLongPositon = preTotalLongPositon;
        this.totalLongPositon = totalLongPositon;
        this.preSettlementPrice = preSettlementPrice;
        this.settlementPrice = settlementPrice;
        this.upperLimitPrice = upperLimitPrice;
        this.lowerLimitPrice = lowerLimitPrice;
        this.preDelta = preDelta;
        this.currDelta = currDelta;
        this.dataTime = dataTime;
        this.qty = qty;
        this.turnover = turnover;
        this.avgPrice = avgPrice;
        this.bid = bid;
        this.ask = ask;
        this.bidQty = bidQty;
        this.askQty = askQty;
        this.tradesCount = tradesCount;
        this.tickerStatus = tickerStatus;
        this.stk = stk;
        this.opt = opt;
        this.dataType = dataType;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof DepthMarketDataResponse)) return false;
        final DepthMarketDataResponse other = (DepthMarketDataResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$exchangeType = this.getExchangeType();
        final Object other$exchangeType = other.getExchangeType();
        if (this$exchangeType == null ? other$exchangeType != null : !this$exchangeType.equals(other$exchangeType)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        if (this.getDataTime() != other.getDataTime()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof DepthMarketDataResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $exchangeType = this.getExchangeType();
        result = result * PRIME + ($exchangeType == null ? 43 : $exchangeType.hashCode());
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        final long $dataTime = this.getDataTime();
        result = result * PRIME + (int) ($dataTime >>> 32 ^ $dataTime);
        return result;
    }
}
