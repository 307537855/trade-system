// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.quote.model.response;

import com.zts.xtp.common.enums.ExchangeType;

/**
 * 订单簿模型
 *
 * @author roger on 2018/5/15
 */
public class OrderBookResponse {
    /**
     * 交易所代码
     */
    private ExchangeType exchangeType;
    /**
     * 合约代码 char[16]
     */
    private String ticker;
    /**
     * 时间类，格式为 yyyyMMddHHmmssSSS
     */
    private long dataTime;
    /**
     * 最新价
     */
    private double lastPrice;
    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    private long qty;
    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    private double turnover;
    /**
     * 成交笔数
     */
    private long tradesCount;
    /**
     * 十档申买价
     */
    private double[] bid;
    /**
     * 十档申卖价
     */
    private double[] ask;
    /**
     * 十档申买量
     */
    private long[] bidQty;
    /**
     * 十档申卖量
     */
    private long[] askQty;

    public void setExchangeType(int exchangeType) {
        if (ExchangeType.values().length < exchangeType) {
            this.exchangeType = ExchangeType.UNKNOWN;
            System.err.println("Error: OrderBookResponse received ExchangeType value exceed ExchangeType enum size, receive=" + exchangeType);
        } else {
            this.exchangeType = ExchangeType.values()[exchangeType - 1];
        }
    }

    public void setExchangeType(ExchangeType exchangeType) {
        this.exchangeType = exchangeType;
    }


    @SuppressWarnings("all")
    public static class OrderBookResponseBuilder {
        @SuppressWarnings("all")
        private ExchangeType exchangeType;
        @SuppressWarnings("all")
        private String ticker;
        @SuppressWarnings("all")
        private long dataTime;
        @SuppressWarnings("all")
        private double lastPrice;
        @SuppressWarnings("all")
        private long qty;
        @SuppressWarnings("all")
        private double turnover;
        @SuppressWarnings("all")
        private long tradesCount;
        @SuppressWarnings("all")
        private double[] bid;
        @SuppressWarnings("all")
        private double[] ask;
        @SuppressWarnings("all")
        private long[] bidQty;
        @SuppressWarnings("all")
        private long[] askQty;

        @SuppressWarnings("all")
        OrderBookResponseBuilder() {
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder exchangeType(final ExchangeType exchangeType) {
            this.exchangeType = exchangeType;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder ticker(final String ticker) {
            this.ticker = ticker;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder dataTime(final long dataTime) {
            this.dataTime = dataTime;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder lastPrice(final double lastPrice) {
            this.lastPrice = lastPrice;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder qty(final long qty) {
            this.qty = qty;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder turnover(final double turnover) {
            this.turnover = turnover;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder tradesCount(final long tradesCount) {
            this.tradesCount = tradesCount;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder bid(final double[] bid) {
            this.bid = bid;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder ask(final double[] ask) {
            this.ask = ask;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder bidQty(final long[] bidQty) {
            this.bidQty = bidQty;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponseBuilder askQty(final long[] askQty) {
            this.askQty = askQty;
            return this;
        }

        @SuppressWarnings("all")
        public OrderBookResponse build() {
            return new OrderBookResponse(exchangeType, ticker, dataTime, lastPrice, qty, turnover, tradesCount, bid, ask, bidQty, askQty);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "OrderBookResponse.OrderBookResponseBuilder(exchangeType=" + this.exchangeType + ", ticker=" + this.ticker + ", dataTime=" + this.dataTime + ", lastPrice=" + this.lastPrice + ", qty=" + this.qty + ", turnover=" + this.turnover + ", tradesCount=" + this.tradesCount + ", bid=" + java.util.Arrays.toString(this.bid) + ", ask=" + java.util.Arrays.toString(this.ask) + ", bidQty=" + java.util.Arrays.toString(this.bidQty) + ", askQty=" + java.util.Arrays.toString(this.askQty) + ")";
        }
    }

    @SuppressWarnings("all")
    public static OrderBookResponseBuilder builder() {
        return new OrderBookResponseBuilder();
    }

    /**
     * 交易所代码
     */
    @SuppressWarnings("all")
    public ExchangeType getExchangeType() {
        return this.exchangeType;
    }

    /**
     * 合约代码 char[16]
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 时间类，格式为 yyyyMMddHHmmssSSS
     */
    @SuppressWarnings("all")
    public long getDataTime() {
        return this.dataTime;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public double getLastPrice() {
        return this.lastPrice;
    }

    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    @SuppressWarnings("all")
    public long getQty() {
        return this.qty;
    }

    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    @SuppressWarnings("all")
    public double getTurnover() {
        return this.turnover;
    }

    /**
     * 成交笔数
     */
    @SuppressWarnings("all")
    public long getTradesCount() {
        return this.tradesCount;
    }

    /**
     * 十档申买价
     */
    @SuppressWarnings("all")
    public double[] getBid() {
        return this.bid;
    }

    /**
     * 十档申卖价
     */
    @SuppressWarnings("all")
    public double[] getAsk() {
        return this.ask;
    }

    /**
     * 十档申买量
     */
    @SuppressWarnings("all")
    public long[] getBidQty() {
        return this.bidQty;
    }

    /**
     * 十档申卖量
     */
    @SuppressWarnings("all")
    public long[] getAskQty() {
        return this.askQty;
    }

    /**
     * 合约代码 char[16]
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 时间类，格式为 yyyyMMddHHmmssSSS
     */
    @SuppressWarnings("all")
    public void setDataTime(final long dataTime) {
        this.dataTime = dataTime;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public void setLastPrice(final double lastPrice) {
        this.lastPrice = lastPrice;
    }

    /**
     * 数量，为总成交量（单位股，与交易所一致）
     */
    @SuppressWarnings("all")
    public void setQty(final long qty) {
        this.qty = qty;
    }

    /**
     * 成交金额，为总成交金额（单位元，与交易所一致）
     */
    @SuppressWarnings("all")
    public void setTurnover(final double turnover) {
        this.turnover = turnover;
    }

    /**
     * 成交笔数
     */
    @SuppressWarnings("all")
    public void setTradesCount(final long tradesCount) {
        this.tradesCount = tradesCount;
    }

    /**
     * 十档申买价
     */
    @SuppressWarnings("all")
    public void setBid(final double[] bid) {
        this.bid = bid;
    }

    /**
     * 十档申卖价
     */
    @SuppressWarnings("all")
    public void setAsk(final double[] ask) {
        this.ask = ask;
    }

    /**
     * 十档申买量
     */
    @SuppressWarnings("all")
    public void setBidQty(final long[] bidQty) {
        this.bidQty = bidQty;
    }

    /**
     * 十档申卖量
     */
    @SuppressWarnings("all")
    public void setAskQty(final long[] askQty) {
        this.askQty = askQty;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "OrderBookResponse(exchangeType=" + this.getExchangeType() + ", ticker=" + this.getTicker() + ", dataTime=" + this.getDataTime() + ", lastPrice=" + this.getLastPrice() + ", qty=" + this.getQty() + ", turnover=" + this.getTurnover() + ", tradesCount=" + this.getTradesCount() + ", bid=" + java.util.Arrays.toString(this.getBid()) + ", ask=" + java.util.Arrays.toString(this.getAsk()) + ", bidQty=" + java.util.Arrays.toString(this.getBidQty()) + ", askQty=" + java.util.Arrays.toString(this.getAskQty()) + ")";
    }

    @SuppressWarnings("all")
    public OrderBookResponse() {
    }

    @SuppressWarnings("all")
    public OrderBookResponse(final ExchangeType exchangeType, final String ticker, final long dataTime, final double lastPrice, final long qty, final double turnover, final long tradesCount, final double[] bid, final double[] ask, final long[] bidQty, final long[] askQty) {
        this.exchangeType = exchangeType;
        this.ticker = ticker;
        this.dataTime = dataTime;
        this.lastPrice = lastPrice;
        this.qty = qty;
        this.turnover = turnover;
        this.tradesCount = tradesCount;
        this.bid = bid;
        this.ask = ask;
        this.bidQty = bidQty;
        this.askQty = askQty;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof OrderBookResponse)) return false;
        final OrderBookResponse other = (OrderBookResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$exchangeType = this.getExchangeType();
        final Object other$exchangeType = other.getExchangeType();
        if (this$exchangeType == null ? other$exchangeType != null : !this$exchangeType.equals(other$exchangeType)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        if (this.getDataTime() != other.getDataTime()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof OrderBookResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $exchangeType = this.getExchangeType();
        result = result * PRIME + ($exchangeType == null ? 43 : $exchangeType.hashCode());
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        final long $dataTime = this.getDataTime();
        result = result * PRIME + (int) ($dataTime >>> 32 ^ $dataTime);
        return result;
    }
}
