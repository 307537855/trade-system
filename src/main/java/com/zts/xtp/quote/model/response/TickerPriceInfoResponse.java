// Generated by delombok at Sun Sep 22 21:37:45 CST 2019
package com.zts.xtp.quote.model.response;

import com.zts.xtp.common.enums.ExchangeType;

public class TickerPriceInfoResponse {
    /**
     * 交易所代码
     */
    private ExchangeType exchangeType;
    /**
     * 合约代码
     */
    private String ticker;
    /**
     * 最新价
     */
    private double lastPrice;
    /**
     * 是否最后一条记录
     */
    private boolean lastResp;

    public void setExchangeType(int exchangeType) {
        if (ExchangeType.values().length < exchangeType) {
            this.exchangeType = ExchangeType.UNKNOWN;
            System.err.println("Error: TickerPriceInfoResponse received ExchangeType value exceed ExchangeType enum size, receive=" + exchangeType);
        } else {
            this.exchangeType = ExchangeType.values()[exchangeType - 1];
        }
    }

    /**
     * 交易所代码
     */
    @SuppressWarnings("all")
    public ExchangeType getExchangeType() {
        return this.exchangeType;
    }

    /**
     * 合约代码
     */
    @SuppressWarnings("all")
    public String getTicker() {
        return this.ticker;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public double getLastPrice() {
        return this.lastPrice;
    }

    /**
     * 是否最后一条记录
     */
    @SuppressWarnings("all")
    public boolean isLastResp() {
        return this.lastResp;
    }

    /**
     * 合约代码
     */
    @SuppressWarnings("all")
    public void setTicker(final String ticker) {
        this.ticker = ticker;
    }

    /**
     * 最新价
     */
    @SuppressWarnings("all")
    public void setLastPrice(final double lastPrice) {
        this.lastPrice = lastPrice;
    }

    /**
     * 是否最后一条记录
     */
    @SuppressWarnings("all")
    public void setLastResp(final boolean lastResp) {
        this.lastResp = lastResp;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof TickerPriceInfoResponse)) return false;
        final TickerPriceInfoResponse other = (TickerPriceInfoResponse) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$exchangeType = this.getExchangeType();
        final Object other$exchangeType = other.getExchangeType();
        if (this$exchangeType == null ? other$exchangeType != null : !this$exchangeType.equals(other$exchangeType)) return false;
        final Object this$ticker = this.getTicker();
        final Object other$ticker = other.getTicker();
        if (this$ticker == null ? other$ticker != null : !this$ticker.equals(other$ticker)) return false;
        if (Double.compare(this.getLastPrice(), other.getLastPrice()) != 0) return false;
        if (this.isLastResp() != other.isLastResp()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof TickerPriceInfoResponse;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $exchangeType = this.getExchangeType();
        result = result * PRIME + ($exchangeType == null ? 43 : $exchangeType.hashCode());
        final Object $ticker = this.getTicker();
        result = result * PRIME + ($ticker == null ? 43 : $ticker.hashCode());
        final long $lastPrice = Double.doubleToLongBits(this.getLastPrice());
        result = result * PRIME + (int) ($lastPrice >>> 32 ^ $lastPrice);
        result = result * PRIME + (this.isLastResp() ? 79 : 97);
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "TickerPriceInfoResponse(exchangeType=" + this.getExchangeType() + ", ticker=" + this.getTicker() + ", lastPrice=" + this.getLastPrice() + ", lastResp=" + this.isLastResp() + ")";
    }

    @SuppressWarnings("all")
    public TickerPriceInfoResponse() {
    }

    @SuppressWarnings("all")
    public TickerPriceInfoResponse(final ExchangeType exchangeType, final String ticker, final double lastPrice, final boolean lastResp) {
        this.exchangeType = exchangeType;
        this.ticker = ticker;
        this.lastPrice = lastPrice;
        this.lastResp = lastResp;
    }
}
